// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	HTTPBasicScopes = "HTTPBasic.Scopes"
	JWTBearerScopes = "JWTBearer.Scopes"
)

// Defines values for AddCharacterSchemaSkin.
const (
	AddCharacterSchemaSkinMen1   AddCharacterSchemaSkin = "men1"
	AddCharacterSchemaSkinMen2   AddCharacterSchemaSkin = "men2"
	AddCharacterSchemaSkinMen3   AddCharacterSchemaSkin = "men3"
	AddCharacterSchemaSkinWomen1 AddCharacterSchemaSkin = "women1"
	AddCharacterSchemaSkinWomen2 AddCharacterSchemaSkin = "women2"
	AddCharacterSchemaSkinWomen3 AddCharacterSchemaSkin = "women3"
)

// Defines values for CharacterSchemaSkin.
const (
	CharacterSchemaSkinMen1   CharacterSchemaSkin = "men1"
	CharacterSchemaSkinMen2   CharacterSchemaSkin = "men2"
	CharacterSchemaSkinMen3   CharacterSchemaSkin = "men3"
	CharacterSchemaSkinWomen1 CharacterSchemaSkin = "women1"
	CharacterSchemaSkinWomen2 CharacterSchemaSkin = "women2"
	CharacterSchemaSkinWomen3 CharacterSchemaSkin = "women3"
)

// Defines values for CooldownSchemaReason.
const (
	BuyGe        CooldownSchemaReason = "buy_ge"
	Crafting     CooldownSchemaReason = "crafting"
	DeleteItem   CooldownSchemaReason = "delete_item"
	DepositBank  CooldownSchemaReason = "deposit_bank"
	Equip        CooldownSchemaReason = "equip"
	Fight        CooldownSchemaReason = "fight"
	Gathering    CooldownSchemaReason = "gathering"
	Movement     CooldownSchemaReason = "movement"
	Recycling    CooldownSchemaReason = "recycling"
	SellGe       CooldownSchemaReason = "sell_ge"
	Task         CooldownSchemaReason = "task"
	Unequip      CooldownSchemaReason = "unequip"
	WithdrawBank CooldownSchemaReason = "withdraw_bank"
)

// Defines values for CraftSchemaSkill0.
const (
	CraftSchemaSkill0Cooking         CraftSchemaSkill0 = "cooking"
	CraftSchemaSkill0Gearcrafting    CraftSchemaSkill0 = "gearcrafting"
	CraftSchemaSkill0Jewelrycrafting CraftSchemaSkill0 = "jewelrycrafting"
	CraftSchemaSkill0Mining          CraftSchemaSkill0 = "mining"
	CraftSchemaSkill0Weaponcrafting  CraftSchemaSkill0 = "weaponcrafting"
	CraftSchemaSkill0Woodcutting     CraftSchemaSkill0 = "woodcutting"
)

// Defines values for EquipRequestSchemaSlot.
const (
	EquipRequestSchemaSlotAmulet      EquipRequestSchemaSlot = "amulet"
	EquipRequestSchemaSlotArtifact1   EquipRequestSchemaSlot = "artifact1"
	EquipRequestSchemaSlotArtifact2   EquipRequestSchemaSlot = "artifact2"
	EquipRequestSchemaSlotArtifact3   EquipRequestSchemaSlot = "artifact3"
	EquipRequestSchemaSlotBodyArmor   EquipRequestSchemaSlot = "body_armor"
	EquipRequestSchemaSlotBoots       EquipRequestSchemaSlot = "boots"
	EquipRequestSchemaSlotConsumable1 EquipRequestSchemaSlot = "consumable1"
	EquipRequestSchemaSlotConsumable2 EquipRequestSchemaSlot = "consumable2"
	EquipRequestSchemaSlotHelmet      EquipRequestSchemaSlot = "helmet"
	EquipRequestSchemaSlotLegArmor    EquipRequestSchemaSlot = "leg_armor"
	EquipRequestSchemaSlotRing1       EquipRequestSchemaSlot = "ring1"
	EquipRequestSchemaSlotRing2       EquipRequestSchemaSlot = "ring2"
	EquipRequestSchemaSlotShield      EquipRequestSchemaSlot = "shield"
	EquipRequestSchemaSlotWeapon      EquipRequestSchemaSlot = "weapon"
)

// Defines values for EquipSchemaSlot.
const (
	EquipSchemaSlotAmulet      EquipSchemaSlot = "amulet"
	EquipSchemaSlotArtifact1   EquipSchemaSlot = "artifact1"
	EquipSchemaSlotArtifact2   EquipSchemaSlot = "artifact2"
	EquipSchemaSlotArtifact3   EquipSchemaSlot = "artifact3"
	EquipSchemaSlotBodyArmor   EquipSchemaSlot = "body_armor"
	EquipSchemaSlotBoots       EquipSchemaSlot = "boots"
	EquipSchemaSlotConsumable1 EquipSchemaSlot = "consumable1"
	EquipSchemaSlotConsumable2 EquipSchemaSlot = "consumable2"
	EquipSchemaSlotHelmet      EquipSchemaSlot = "helmet"
	EquipSchemaSlotLegArmor    EquipSchemaSlot = "leg_armor"
	EquipSchemaSlotRing1       EquipSchemaSlot = "ring1"
	EquipSchemaSlotRing2       EquipSchemaSlot = "ring2"
	EquipSchemaSlotShield      EquipSchemaSlot = "shield"
	EquipSchemaSlotWeapon      EquipSchemaSlot = "weapon"
)

// Defines values for FightSchemaResult.
const (
	Lose FightSchemaResult = "lose"
	Win  FightSchemaResult = "win"
)

// Defines values for ResourceSchemaSkill.
const (
	ResourceSchemaSkillFishing     ResourceSchemaSkill = "fishing"
	ResourceSchemaSkillMining      ResourceSchemaSkill = "mining"
	ResourceSchemaSkillWoodcutting ResourceSchemaSkill = "woodcutting"
)

// Defines values for TaskSchemaType.
const (
	Crafts    TaskSchemaType = "crafts"
	Monsters  TaskSchemaType = "monsters"
	Resources TaskSchemaType = "resources"
)

// Defines values for UnequipSchemaSlot.
const (
	UnequipSchemaSlotAmulet      UnequipSchemaSlot = "amulet"
	UnequipSchemaSlotArtifact1   UnequipSchemaSlot = "artifact1"
	UnequipSchemaSlotArtifact2   UnequipSchemaSlot = "artifact2"
	UnequipSchemaSlotArtifact3   UnequipSchemaSlot = "artifact3"
	UnequipSchemaSlotBodyArmor   UnequipSchemaSlot = "body_armor"
	UnequipSchemaSlotBoots       UnequipSchemaSlot = "boots"
	UnequipSchemaSlotConsumable1 UnequipSchemaSlot = "consumable1"
	UnequipSchemaSlotConsumable2 UnequipSchemaSlot = "consumable2"
	UnequipSchemaSlotHelmet      UnequipSchemaSlot = "helmet"
	UnequipSchemaSlotLegArmor    UnequipSchemaSlot = "leg_armor"
	UnequipSchemaSlotRing1       UnequipSchemaSlot = "ring1"
	UnequipSchemaSlotRing2       UnequipSchemaSlot = "ring2"
	UnequipSchemaSlotShield      UnequipSchemaSlot = "shield"
	UnequipSchemaSlotWeapon      UnequipSchemaSlot = "weapon"
)

// Defines values for GetAllCharactersCharactersGetParamsSort.
const (
	GetAllCharactersCharactersGetParamsSortCooking         GetAllCharactersCharactersGetParamsSort = "cooking"
	GetAllCharactersCharactersGetParamsSortFishing         GetAllCharactersCharactersGetParamsSort = "fishing"
	GetAllCharactersCharactersGetParamsSortGearcrafting    GetAllCharactersCharactersGetParamsSort = "gearcrafting"
	GetAllCharactersCharactersGetParamsSortGold            GetAllCharactersCharactersGetParamsSort = "gold"
	GetAllCharactersCharactersGetParamsSortJewelrycrafting GetAllCharactersCharactersGetParamsSort = "jewelrycrafting"
	GetAllCharactersCharactersGetParamsSortMining          GetAllCharactersCharactersGetParamsSort = "mining"
	GetAllCharactersCharactersGetParamsSortWeaponcrafting  GetAllCharactersCharactersGetParamsSort = "weaponcrafting"
	GetAllCharactersCharactersGetParamsSortWoodcutting     GetAllCharactersCharactersGetParamsSort = "woodcutting"
)

// Defines values for GetAllItemsItemsGetParamsType.
const (
	GetAllItemsItemsGetParamsTypeAmulet     GetAllItemsItemsGetParamsType = "amulet"
	GetAllItemsItemsGetParamsTypeBodyArmor  GetAllItemsItemsGetParamsType = "body_armor"
	GetAllItemsItemsGetParamsTypeBoots      GetAllItemsItemsGetParamsType = "boots"
	GetAllItemsItemsGetParamsTypeConsumable GetAllItemsItemsGetParamsType = "consumable"
	GetAllItemsItemsGetParamsTypeHelmet     GetAllItemsItemsGetParamsType = "helmet"
	GetAllItemsItemsGetParamsTypeLegArmor   GetAllItemsItemsGetParamsType = "leg_armor"
	GetAllItemsItemsGetParamsTypeResource   GetAllItemsItemsGetParamsType = "resource"
	GetAllItemsItemsGetParamsTypeRing       GetAllItemsItemsGetParamsType = "ring"
	GetAllItemsItemsGetParamsTypeShield     GetAllItemsItemsGetParamsType = "shield"
	GetAllItemsItemsGetParamsTypeWeapon     GetAllItemsItemsGetParamsType = "weapon"
)

// Defines values for GetAllItemsItemsGetParamsCraftSkill.
const (
	GetAllItemsItemsGetParamsCraftSkillCooking         GetAllItemsItemsGetParamsCraftSkill = "cooking"
	GetAllItemsItemsGetParamsCraftSkillGearcrafting    GetAllItemsItemsGetParamsCraftSkill = "gearcrafting"
	GetAllItemsItemsGetParamsCraftSkillJewelrycrafting GetAllItemsItemsGetParamsCraftSkill = "jewelrycrafting"
	GetAllItemsItemsGetParamsCraftSkillMining          GetAllItemsItemsGetParamsCraftSkill = "mining"
	GetAllItemsItemsGetParamsCraftSkillWeaponcrafting  GetAllItemsItemsGetParamsCraftSkill = "weaponcrafting"
	GetAllItemsItemsGetParamsCraftSkillWoodcutting     GetAllItemsItemsGetParamsCraftSkill = "woodcutting"
)

// Defines values for GetAllMapsMapsGetParamsContentType.
const (
	Bank          GetAllMapsMapsGetParamsContentType = "bank"
	GrandExchange GetAllMapsMapsGetParamsContentType = "grand_exchange"
	Monster       GetAllMapsMapsGetParamsContentType = "monster"
	Resource      GetAllMapsMapsGetParamsContentType = "resource"
	TasksMaster   GetAllMapsMapsGetParamsContentType = "tasks_master"
	Workshop      GetAllMapsMapsGetParamsContentType = "workshop"
)

// Defines values for GetAllResourcesResourcesGetParamsSkill.
const (
	Fishing     GetAllResourcesResourcesGetParamsSkill = "fishing"
	Mining      GetAllResourcesResourcesGetParamsSkill = "mining"
	Woodcutting GetAllResourcesResourcesGetParamsSkill = "woodcutting"
)

// ActionItemBankResponseSchema defines model for ActionItemBankResponseSchema.
type ActionItemBankResponseSchema struct {
	Data BankItemSchema `json:"data"`
}

// ActiveEventSchema defines model for ActiveEventSchema.
type ActiveEventSchema struct {
	// CreatedAt Start datetime.
	CreatedAt time.Time `json:"created_at"`

	// Duration Duration in minutes.
	Duration int `json:"duration"`

	// Expiration Expiration datetime.
	Expiration time.Time `json:"expiration"`

	// Map Map of the event.
	Map MapSchema `json:"map"`

	// Name Name of the event.
	Name string `json:"name"`

	// PreviousSkin Previous map skin.
	PreviousSkin string `json:"previous_skin"`
}

// AddAccountSchema defines model for AddAccountSchema.
type AddAccountSchema struct {
	// Email Your email.
	Email openapi_types.Email `json:"email"`

	// Password Your password.
	Password string `json:"password"`

	// Username Your desired username.
	Username string `json:"username"`
}

// AddCharacterSchema defines model for AddCharacterSchema.
type AddCharacterSchema struct {
	// Name Your desired character name. It's unique and all players can see it.
	Name string `json:"name"`

	// Skin Your desired skin.
	Skin AddCharacterSchemaSkin `json:"skin"`
}

// AddCharacterSchemaSkin Your desired skin.
type AddCharacterSchemaSkin string

// AnnouncementSchema defines model for AnnouncementSchema.
type AnnouncementSchema struct {
	// CreatedAt Datetime of the announcement.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Message Announcement text.
	Message string `json:"message"`
}

// BankItemSchema defines model for BankItemSchema.
type BankItemSchema struct {
	// Bank Items in your banks.
	Bank []SimpleItemSchema `json:"bank"`

	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Item Item details.
	Item ItemSchema `json:"item"`
}

// BlockedHitsSchema defines model for BlockedHitsSchema.
type BlockedHitsSchema struct {
	// Air The amount of air hits blocked.
	Air int `json:"air"`

	// Earth The amount of earth hits blocked.
	Earth int `json:"earth"`

	// Fire The amount of fire hits blocked.
	Fire int `json:"fire"`

	// Total The amount of total hits blocked.
	Total int `json:"total"`

	// Water The amount of water hits blocked.
	Water int `json:"water"`
}

// ChangePassword defines model for ChangePassword.
type ChangePassword struct {
	// Password Your password.
	Password string `json:"password"`
}

// CharacterFightDataSchema defines model for CharacterFightDataSchema.
type CharacterFightDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Fight Fight details.
	Fight FightSchema `json:"fight"`
}

// CharacterFightResponseSchema defines model for CharacterFightResponseSchema.
type CharacterFightResponseSchema struct {
	Data CharacterFightDataSchema `json:"data"`
}

// CharacterMovementDataSchema defines model for CharacterMovementDataSchema.
type CharacterMovementDataSchema struct {
	// Character Character details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details
	Cooldown CooldownSchema `json:"cooldown"`

	// Destination Destination details.
	Destination DestinationResponseSchema `json:"destination"`
}

// CharacterMovementResponseSchema defines model for CharacterMovementResponseSchema.
type CharacterMovementResponseSchema struct {
	Data CharacterMovementDataSchema `json:"data"`
}

// CharacterResponseSchema defines model for CharacterResponseSchema.
type CharacterResponseSchema struct {
	Data CharacterSchema `json:"data"`
}

// CharacterSchema defines model for CharacterSchema.
type CharacterSchema struct {
	// AmuletSlot Amulet slot.
	AmuletSlot string `json:"amulet_slot"`

	// Artifact1Slot Artifact 1 slot.
	Artifact1Slot string `json:"artifact1_slot"`

	// Artifact2Slot Artifact 2 slot.
	Artifact2Slot string `json:"artifact2_slot"`

	// Artifact3Slot Artifact 3 slot.
	Artifact3Slot string `json:"artifact3_slot"`

	// AttackAir Air attack.
	AttackAir int `json:"attack_air"`

	// AttackEarth Earth attack.
	AttackEarth int `json:"attack_earth"`

	// AttackFire Fire attack.
	AttackFire int `json:"attack_fire"`

	// AttackWater Water attack.
	AttackWater int `json:"attack_water"`

	// BodyArmorSlot Body armor slot.
	BodyArmorSlot string `json:"body_armor_slot"`

	// BootsSlot Boots slot.
	BootsSlot string `json:"boots_slot"`

	// Consumable1Slot Consumable 1 slot.
	Consumable1Slot string `json:"consumable1_slot"`

	// Consumable1SlotQuantity Consumable 1 quantity.
	Consumable1SlotQuantity int `json:"consumable1_slot_quantity"`

	// Consumable2Slot Consumable 2 slot.
	Consumable2Slot string `json:"consumable2_slot"`

	// Consumable2SlotQuantity Consumable 2 quantity.
	Consumable2SlotQuantity int `json:"consumable2_slot_quantity"`

	// CookingLevel The current xp level of the Cooking skill.
	CookingLevel int `json:"cooking_level"`

	// CookingMaxXp Cooking XP required to level up the skill.
	CookingMaxXp int `json:"cooking_max_xp"`

	// CookingXp Cooking XP.
	CookingXp int `json:"cooking_xp"`

	// Cooldown Cooldown in seconds.
	Cooldown int `json:"cooldown"`

	// CooldownExpiration Datetime Cooldown expiration.
	CooldownExpiration *CharacterSchema_CooldownExpiration `json:"cooldown_expiration,omitempty"`

	// CriticalStrike *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack's damage.
	CriticalStrike int `json:"critical_strike"`

	// DmgAir % Air damage.
	DmgAir int `json:"dmg_air"`

	// DmgEarth % Earth damage.
	DmgEarth int `json:"dmg_earth"`

	// DmgFire % Fire damage.
	DmgFire int `json:"dmg_fire"`

	// DmgWater % Water damage.
	DmgWater int `json:"dmg_water"`

	// FishingLevel Fishing level.
	FishingLevel int `json:"fishing_level"`

	// FishingMaxXp Fishing XP required to level up the skill.
	FishingMaxXp int `json:"fishing_max_xp"`

	// FishingXp The current xp level of the Fishing skill.
	FishingXp int `json:"fishing_xp"`

	// GearcraftingLevel Gearcrafting level.
	GearcraftingLevel int `json:"gearcrafting_level"`

	// GearcraftingMaxXp Gearcrafting XP required to level up the skill.
	GearcraftingMaxXp int `json:"gearcrafting_max_xp"`

	// GearcraftingXp The current xp level of the Gearcrafting skill.
	GearcraftingXp int `json:"gearcrafting_xp"`

	// Gold The numbers of golds on this character.
	Gold int `json:"gold"`

	// Haste *Character Haste. Increase speed attack (reduce fight cooldown)
	Haste int `json:"haste"`

	// HelmetSlot Helmet slot.
	HelmetSlot string `json:"helmet_slot"`

	// Hp Character HP.
	Hp int `json:"hp"`

	// Inventory List of inventory slots.
	Inventory *[]InventorySlot `json:"inventory,omitempty"`

	// InventoryMaxItems Inventory max items.
	InventoryMaxItems int `json:"inventory_max_items"`

	// JewelrycraftingLevel Jewelrycrafting level.
	JewelrycraftingLevel int `json:"jewelrycrafting_level"`

	// JewelrycraftingMaxXp Jewelrycrafting XP required to level up the skill.
	JewelrycraftingMaxXp int `json:"jewelrycrafting_max_xp"`

	// JewelrycraftingXp The current xp level of the Jewelrycrafting skill.
	JewelrycraftingXp int `json:"jewelrycrafting_xp"`

	// LegArmorSlot Leg armor slot.
	LegArmorSlot string `json:"leg_armor_slot"`

	// Level Combat level.
	Level int `json:"level"`

	// MaxXp XP required to level up the character.
	MaxXp int `json:"max_xp"`

	// MiningLevel Mining level.
	MiningLevel int `json:"mining_level"`

	// MiningMaxXp Mining XP required to level up the skill.
	MiningMaxXp int `json:"mining_max_xp"`

	// MiningXp The current xp level of the Mining skill.
	MiningXp int `json:"mining_xp"`

	// Name Name of the character.
	Name string `json:"name"`

	// ResAir % Air resistance.
	ResAir int `json:"res_air"`

	// ResEarth % Earth resistance.
	ResEarth int `json:"res_earth"`

	// ResFire % Fire resistance.
	ResFire int `json:"res_fire"`

	// ResWater % Water resistance.
	ResWater int `json:"res_water"`

	// Ring1Slot Ring 1 slot.
	Ring1Slot string `json:"ring1_slot"`

	// Ring2Slot Ring 2 slot.
	Ring2Slot string `json:"ring2_slot"`

	// ShieldSlot Shield slot.
	ShieldSlot string `json:"shield_slot"`

	// Skin Character skin code.
	Skin CharacterSchemaSkin `json:"skin"`

	// Speed *Not available, on the roadmap. Character movement speed.
	Speed int `json:"speed"`

	// Stamina *Not available, on the roadmap. Regenerates life at the start of each turn.
	Stamina int `json:"stamina"`

	// Task Task in progress.
	Task string `json:"task"`

	// TaskProgress Task progression.
	TaskProgress int `json:"task_progress"`

	// TaskTotal Task total objective.
	TaskTotal int `json:"task_total"`

	// TaskType Task type.
	TaskType string `json:"task_type"`

	// TotalXp Total XP of your character.
	TotalXp int `json:"total_xp"`

	// WeaponSlot Weapon slot.
	WeaponSlot string `json:"weapon_slot"`

	// WeaponcraftingLevel Weaponcrafting level.
	WeaponcraftingLevel int `json:"weaponcrafting_level"`

	// WeaponcraftingMaxXp Weaponcrafting XP required to level up the skill.
	WeaponcraftingMaxXp int `json:"weaponcrafting_max_xp"`

	// WeaponcraftingXp The current xp level of the Weaponcrafting skill.
	WeaponcraftingXp int `json:"weaponcrafting_xp"`

	// WoodcuttingLevel Woodcutting level.
	WoodcuttingLevel int `json:"woodcutting_level"`

	// WoodcuttingMaxXp Woodcutting XP required to level up the skill.
	WoodcuttingMaxXp int `json:"woodcutting_max_xp"`

	// WoodcuttingXp The current xp level of the Woodcutting skill.
	WoodcuttingXp int `json:"woodcutting_xp"`

	// X Character x coordinate.
	X int `json:"x"`

	// Xp The current xp level of the combat level.
	Xp int `json:"xp"`

	// Y Character y coordinate.
	Y int `json:"y"`
}

// CharacterSchemaCooldownExpiration0 defines model for .
type CharacterSchemaCooldownExpiration0 = time.Time

// CharacterSchemaCooldownExpiration1 defines model for .
type CharacterSchemaCooldownExpiration1 = interface{}

// CharacterSchema_CooldownExpiration Datetime Cooldown expiration.
type CharacterSchema_CooldownExpiration struct {
	union json.RawMessage
}

// CharacterSchemaSkin Character skin code.
type CharacterSchemaSkin string

// CooldownSchema defines model for CooldownSchema.
type CooldownSchema struct {
	// Expiration The expiration of the cooldown.
	Expiration time.Time `json:"expiration"`

	// Reason The reason of the cooldown.
	Reason CooldownSchemaReason `json:"reason"`

	// RemainingSeconds The remaining seconds of the cooldown.
	RemainingSeconds int `json:"remaining_seconds"`

	// StartedAt The start of the cooldown.
	StartedAt time.Time `json:"started_at"`

	// TotalSeconds The total seconds of the cooldown.
	TotalSeconds int `json:"total_seconds"`
}

// CooldownSchemaReason The reason of the cooldown.
type CooldownSchemaReason string

// CraftSchema defines model for CraftSchema.
type CraftSchema struct {
	// Items List of items required to craft the item.
	Items *[]SimpleItemSchema `json:"items,omitempty"`

	// Level The skill level required to craft the item.
	Level *CraftSchema_Level `json:"level,omitempty"`

	// Quantity Quantity of items crafted.
	Quantity *CraftSchema_Quantity `json:"quantity,omitempty"`

	// Skill Skill required to craft the item.
	Skill *CraftSchema_Skill `json:"skill,omitempty"`
}

// CraftSchemaLevel0 defines model for .
type CraftSchemaLevel0 = int

// CraftSchemaLevel1 defines model for .
type CraftSchemaLevel1 = interface{}

// CraftSchema_Level The skill level required to craft the item.
type CraftSchema_Level struct {
	union json.RawMessage
}

// CraftSchemaQuantity0 defines model for .
type CraftSchemaQuantity0 = int

// CraftSchemaQuantity1 defines model for .
type CraftSchemaQuantity1 = interface{}

// CraftSchema_Quantity Quantity of items crafted.
type CraftSchema_Quantity struct {
	union json.RawMessage
}

// CraftSchemaSkill0 defines model for CraftSchema.Skill.0.
type CraftSchemaSkill0 string

// CraftSchemaSkill1 defines model for .
type CraftSchemaSkill1 = interface{}

// CraftSchema_Skill Skill required to craft the item.
type CraftSchema_Skill struct {
	union json.RawMessage
}

// CraftingSchema defines model for CraftingSchema.
type CraftingSchema struct {
	// Code Craft code.
	Code string `json:"code"`

	// Quantity Quantity of items to craft.
	Quantity *int `json:"quantity,omitempty"`
}

// DataPageActiveEventSchema defines model for DataPage_ActiveEventSchema_.
type DataPageActiveEventSchema struct {
	Data  []ActiveEventSchema              `json:"data"`
	Page  DataPageActiveEventSchema_Page   `json:"page"`
	Pages *DataPageActiveEventSchema_Pages `json:"pages,omitempty"`
	Size  DataPageActiveEventSchema_Size   `json:"size"`
	Total DataPageActiveEventSchema_Total  `json:"total"`
}

// DataPageActiveEventSchemaPage0 defines model for .
type DataPageActiveEventSchemaPage0 = int

// DataPageActiveEventSchemaPage1 defines model for .
type DataPageActiveEventSchemaPage1 = interface{}

// DataPageActiveEventSchema_Page defines model for DataPageActiveEventSchema.Page.
type DataPageActiveEventSchema_Page struct {
	union json.RawMessage
}

// DataPageActiveEventSchemaPages0 defines model for .
type DataPageActiveEventSchemaPages0 = int

// DataPageActiveEventSchemaPages1 defines model for .
type DataPageActiveEventSchemaPages1 = interface{}

// DataPageActiveEventSchema_Pages defines model for DataPageActiveEventSchema.Pages.
type DataPageActiveEventSchema_Pages struct {
	union json.RawMessage
}

// DataPageActiveEventSchemaSize0 defines model for .
type DataPageActiveEventSchemaSize0 = int

// DataPageActiveEventSchemaSize1 defines model for .
type DataPageActiveEventSchemaSize1 = interface{}

// DataPageActiveEventSchema_Size defines model for DataPageActiveEventSchema.Size.
type DataPageActiveEventSchema_Size struct {
	union json.RawMessage
}

// DataPageActiveEventSchemaTotal0 defines model for .
type DataPageActiveEventSchemaTotal0 = int

// DataPageActiveEventSchemaTotal1 defines model for .
type DataPageActiveEventSchemaTotal1 = interface{}

// DataPageActiveEventSchema_Total defines model for DataPageActiveEventSchema.Total.
type DataPageActiveEventSchema_Total struct {
	union json.RawMessage
}

// DataPageCharacterSchema defines model for DataPage_CharacterSchema_.
type DataPageCharacterSchema struct {
	Data  []CharacterSchema              `json:"data"`
	Page  DataPageCharacterSchema_Page   `json:"page"`
	Pages *DataPageCharacterSchema_Pages `json:"pages,omitempty"`
	Size  DataPageCharacterSchema_Size   `json:"size"`
	Total DataPageCharacterSchema_Total  `json:"total"`
}

// DataPageCharacterSchemaPage0 defines model for .
type DataPageCharacterSchemaPage0 = int

// DataPageCharacterSchemaPage1 defines model for .
type DataPageCharacterSchemaPage1 = interface{}

// DataPageCharacterSchema_Page defines model for DataPageCharacterSchema.Page.
type DataPageCharacterSchema_Page struct {
	union json.RawMessage
}

// DataPageCharacterSchemaPages0 defines model for .
type DataPageCharacterSchemaPages0 = int

// DataPageCharacterSchemaPages1 defines model for .
type DataPageCharacterSchemaPages1 = interface{}

// DataPageCharacterSchema_Pages defines model for DataPageCharacterSchema.Pages.
type DataPageCharacterSchema_Pages struct {
	union json.RawMessage
}

// DataPageCharacterSchemaSize0 defines model for .
type DataPageCharacterSchemaSize0 = int

// DataPageCharacterSchemaSize1 defines model for .
type DataPageCharacterSchemaSize1 = interface{}

// DataPageCharacterSchema_Size defines model for DataPageCharacterSchema.Size.
type DataPageCharacterSchema_Size struct {
	union json.RawMessage
}

// DataPageCharacterSchemaTotal0 defines model for .
type DataPageCharacterSchemaTotal0 = int

// DataPageCharacterSchemaTotal1 defines model for .
type DataPageCharacterSchemaTotal1 = interface{}

// DataPageCharacterSchema_Total defines model for DataPageCharacterSchema.Total.
type DataPageCharacterSchema_Total struct {
	union json.RawMessage
}

// DataPageGEItemSchema defines model for DataPage_GEItemSchema_.
type DataPageGEItemSchema struct {
	Data  []GEItemSchema              `json:"data"`
	Page  DataPageGEItemSchema_Page   `json:"page"`
	Pages *DataPageGEItemSchema_Pages `json:"pages,omitempty"`
	Size  DataPageGEItemSchema_Size   `json:"size"`
	Total DataPageGEItemSchema_Total  `json:"total"`
}

// DataPageGEItemSchemaPage0 defines model for .
type DataPageGEItemSchemaPage0 = int

// DataPageGEItemSchemaPage1 defines model for .
type DataPageGEItemSchemaPage1 = interface{}

// DataPageGEItemSchema_Page defines model for DataPageGEItemSchema.Page.
type DataPageGEItemSchema_Page struct {
	union json.RawMessage
}

// DataPageGEItemSchemaPages0 defines model for .
type DataPageGEItemSchemaPages0 = int

// DataPageGEItemSchemaPages1 defines model for .
type DataPageGEItemSchemaPages1 = interface{}

// DataPageGEItemSchema_Pages defines model for DataPageGEItemSchema.Pages.
type DataPageGEItemSchema_Pages struct {
	union json.RawMessage
}

// DataPageGEItemSchemaSize0 defines model for .
type DataPageGEItemSchemaSize0 = int

// DataPageGEItemSchemaSize1 defines model for .
type DataPageGEItemSchemaSize1 = interface{}

// DataPageGEItemSchema_Size defines model for DataPageGEItemSchema.Size.
type DataPageGEItemSchema_Size struct {
	union json.RawMessage
}

// DataPageGEItemSchemaTotal0 defines model for .
type DataPageGEItemSchemaTotal0 = int

// DataPageGEItemSchemaTotal1 defines model for .
type DataPageGEItemSchemaTotal1 = interface{}

// DataPageGEItemSchema_Total defines model for DataPageGEItemSchema.Total.
type DataPageGEItemSchema_Total struct {
	union json.RawMessage
}

// DataPageItemSchema defines model for DataPage_ItemSchema_.
type DataPageItemSchema struct {
	Data  []ItemSchema              `json:"data"`
	Page  DataPageItemSchema_Page   `json:"page"`
	Pages *DataPageItemSchema_Pages `json:"pages,omitempty"`
	Size  DataPageItemSchema_Size   `json:"size"`
	Total DataPageItemSchema_Total  `json:"total"`
}

// DataPageItemSchemaPage0 defines model for .
type DataPageItemSchemaPage0 = int

// DataPageItemSchemaPage1 defines model for .
type DataPageItemSchemaPage1 = interface{}

// DataPageItemSchema_Page defines model for DataPageItemSchema.Page.
type DataPageItemSchema_Page struct {
	union json.RawMessage
}

// DataPageItemSchemaPages0 defines model for .
type DataPageItemSchemaPages0 = int

// DataPageItemSchemaPages1 defines model for .
type DataPageItemSchemaPages1 = interface{}

// DataPageItemSchema_Pages defines model for DataPageItemSchema.Pages.
type DataPageItemSchema_Pages struct {
	union json.RawMessage
}

// DataPageItemSchemaSize0 defines model for .
type DataPageItemSchemaSize0 = int

// DataPageItemSchemaSize1 defines model for .
type DataPageItemSchemaSize1 = interface{}

// DataPageItemSchema_Size defines model for DataPageItemSchema.Size.
type DataPageItemSchema_Size struct {
	union json.RawMessage
}

// DataPageItemSchemaTotal0 defines model for .
type DataPageItemSchemaTotal0 = int

// DataPageItemSchemaTotal1 defines model for .
type DataPageItemSchemaTotal1 = interface{}

// DataPageItemSchema_Total defines model for DataPageItemSchema.Total.
type DataPageItemSchema_Total struct {
	union json.RawMessage
}

// DataPageLogSchema defines model for DataPage_LogSchema_.
type DataPageLogSchema struct {
	Data  []LogSchema              `json:"data"`
	Page  DataPageLogSchema_Page   `json:"page"`
	Pages *DataPageLogSchema_Pages `json:"pages,omitempty"`
	Size  DataPageLogSchema_Size   `json:"size"`
	Total DataPageLogSchema_Total  `json:"total"`
}

// DataPageLogSchemaPage0 defines model for .
type DataPageLogSchemaPage0 = int

// DataPageLogSchemaPage1 defines model for .
type DataPageLogSchemaPage1 = interface{}

// DataPageLogSchema_Page defines model for DataPageLogSchema.Page.
type DataPageLogSchema_Page struct {
	union json.RawMessage
}

// DataPageLogSchemaPages0 defines model for .
type DataPageLogSchemaPages0 = int

// DataPageLogSchemaPages1 defines model for .
type DataPageLogSchemaPages1 = interface{}

// DataPageLogSchema_Pages defines model for DataPageLogSchema.Pages.
type DataPageLogSchema_Pages struct {
	union json.RawMessage
}

// DataPageLogSchemaSize0 defines model for .
type DataPageLogSchemaSize0 = int

// DataPageLogSchemaSize1 defines model for .
type DataPageLogSchemaSize1 = interface{}

// DataPageLogSchema_Size defines model for DataPageLogSchema.Size.
type DataPageLogSchema_Size struct {
	union json.RawMessage
}

// DataPageLogSchemaTotal0 defines model for .
type DataPageLogSchemaTotal0 = int

// DataPageLogSchemaTotal1 defines model for .
type DataPageLogSchemaTotal1 = interface{}

// DataPageLogSchema_Total defines model for DataPageLogSchema.Total.
type DataPageLogSchema_Total struct {
	union json.RawMessage
}

// DataPageMapSchema defines model for DataPage_MapSchema_.
type DataPageMapSchema struct {
	Data  []MapSchema              `json:"data"`
	Page  DataPageMapSchema_Page   `json:"page"`
	Pages *DataPageMapSchema_Pages `json:"pages,omitempty"`
	Size  DataPageMapSchema_Size   `json:"size"`
	Total DataPageMapSchema_Total  `json:"total"`
}

// DataPageMapSchemaPage0 defines model for .
type DataPageMapSchemaPage0 = int

// DataPageMapSchemaPage1 defines model for .
type DataPageMapSchemaPage1 = interface{}

// DataPageMapSchema_Page defines model for DataPageMapSchema.Page.
type DataPageMapSchema_Page struct {
	union json.RawMessage
}

// DataPageMapSchemaPages0 defines model for .
type DataPageMapSchemaPages0 = int

// DataPageMapSchemaPages1 defines model for .
type DataPageMapSchemaPages1 = interface{}

// DataPageMapSchema_Pages defines model for DataPageMapSchema.Pages.
type DataPageMapSchema_Pages struct {
	union json.RawMessage
}

// DataPageMapSchemaSize0 defines model for .
type DataPageMapSchemaSize0 = int

// DataPageMapSchemaSize1 defines model for .
type DataPageMapSchemaSize1 = interface{}

// DataPageMapSchema_Size defines model for DataPageMapSchema.Size.
type DataPageMapSchema_Size struct {
	union json.RawMessage
}

// DataPageMapSchemaTotal0 defines model for .
type DataPageMapSchemaTotal0 = int

// DataPageMapSchemaTotal1 defines model for .
type DataPageMapSchemaTotal1 = interface{}

// DataPageMapSchema_Total defines model for DataPageMapSchema.Total.
type DataPageMapSchema_Total struct {
	union json.RawMessage
}

// DataPageMonsterSchema defines model for DataPage_MonsterSchema_.
type DataPageMonsterSchema struct {
	Data  []MonsterSchema              `json:"data"`
	Page  DataPageMonsterSchema_Page   `json:"page"`
	Pages *DataPageMonsterSchema_Pages `json:"pages,omitempty"`
	Size  DataPageMonsterSchema_Size   `json:"size"`
	Total DataPageMonsterSchema_Total  `json:"total"`
}

// DataPageMonsterSchemaPage0 defines model for .
type DataPageMonsterSchemaPage0 = int

// DataPageMonsterSchemaPage1 defines model for .
type DataPageMonsterSchemaPage1 = interface{}

// DataPageMonsterSchema_Page defines model for DataPageMonsterSchema.Page.
type DataPageMonsterSchema_Page struct {
	union json.RawMessage
}

// DataPageMonsterSchemaPages0 defines model for .
type DataPageMonsterSchemaPages0 = int

// DataPageMonsterSchemaPages1 defines model for .
type DataPageMonsterSchemaPages1 = interface{}

// DataPageMonsterSchema_Pages defines model for DataPageMonsterSchema.Pages.
type DataPageMonsterSchema_Pages struct {
	union json.RawMessage
}

// DataPageMonsterSchemaSize0 defines model for .
type DataPageMonsterSchemaSize0 = int

// DataPageMonsterSchemaSize1 defines model for .
type DataPageMonsterSchemaSize1 = interface{}

// DataPageMonsterSchema_Size defines model for DataPageMonsterSchema.Size.
type DataPageMonsterSchema_Size struct {
	union json.RawMessage
}

// DataPageMonsterSchemaTotal0 defines model for .
type DataPageMonsterSchemaTotal0 = int

// DataPageMonsterSchemaTotal1 defines model for .
type DataPageMonsterSchemaTotal1 = interface{}

// DataPageMonsterSchema_Total defines model for DataPageMonsterSchema.Total.
type DataPageMonsterSchema_Total struct {
	union json.RawMessage
}

// DataPageResourceSchema defines model for DataPage_ResourceSchema_.
type DataPageResourceSchema struct {
	Data  []ResourceSchema              `json:"data"`
	Page  DataPageResourceSchema_Page   `json:"page"`
	Pages *DataPageResourceSchema_Pages `json:"pages,omitempty"`
	Size  DataPageResourceSchema_Size   `json:"size"`
	Total DataPageResourceSchema_Total  `json:"total"`
}

// DataPageResourceSchemaPage0 defines model for .
type DataPageResourceSchemaPage0 = int

// DataPageResourceSchemaPage1 defines model for .
type DataPageResourceSchemaPage1 = interface{}

// DataPageResourceSchema_Page defines model for DataPageResourceSchema.Page.
type DataPageResourceSchema_Page struct {
	union json.RawMessage
}

// DataPageResourceSchemaPages0 defines model for .
type DataPageResourceSchemaPages0 = int

// DataPageResourceSchemaPages1 defines model for .
type DataPageResourceSchemaPages1 = interface{}

// DataPageResourceSchema_Pages defines model for DataPageResourceSchema.Pages.
type DataPageResourceSchema_Pages struct {
	union json.RawMessage
}

// DataPageResourceSchemaSize0 defines model for .
type DataPageResourceSchemaSize0 = int

// DataPageResourceSchemaSize1 defines model for .
type DataPageResourceSchemaSize1 = interface{}

// DataPageResourceSchema_Size defines model for DataPageResourceSchema.Size.
type DataPageResourceSchema_Size struct {
	union json.RawMessage
}

// DataPageResourceSchemaTotal0 defines model for .
type DataPageResourceSchemaTotal0 = int

// DataPageResourceSchemaTotal1 defines model for .
type DataPageResourceSchemaTotal1 = interface{}

// DataPageResourceSchema_Total defines model for DataPageResourceSchema.Total.
type DataPageResourceSchema_Total struct {
	union json.RawMessage
}

// DataPageSimpleItemSchema defines model for DataPage_SimpleItemSchema_.
type DataPageSimpleItemSchema struct {
	Data  []SimpleItemSchema              `json:"data"`
	Page  DataPageSimpleItemSchema_Page   `json:"page"`
	Pages *DataPageSimpleItemSchema_Pages `json:"pages,omitempty"`
	Size  DataPageSimpleItemSchema_Size   `json:"size"`
	Total DataPageSimpleItemSchema_Total  `json:"total"`
}

// DataPageSimpleItemSchemaPage0 defines model for .
type DataPageSimpleItemSchemaPage0 = int

// DataPageSimpleItemSchemaPage1 defines model for .
type DataPageSimpleItemSchemaPage1 = interface{}

// DataPageSimpleItemSchema_Page defines model for DataPageSimpleItemSchema.Page.
type DataPageSimpleItemSchema_Page struct {
	union json.RawMessage
}

// DataPageSimpleItemSchemaPages0 defines model for .
type DataPageSimpleItemSchemaPages0 = int

// DataPageSimpleItemSchemaPages1 defines model for .
type DataPageSimpleItemSchemaPages1 = interface{}

// DataPageSimpleItemSchema_Pages defines model for DataPageSimpleItemSchema.Pages.
type DataPageSimpleItemSchema_Pages struct {
	union json.RawMessage
}

// DataPageSimpleItemSchemaSize0 defines model for .
type DataPageSimpleItemSchemaSize0 = int

// DataPageSimpleItemSchemaSize1 defines model for .
type DataPageSimpleItemSchemaSize1 = interface{}

// DataPageSimpleItemSchema_Size defines model for DataPageSimpleItemSchema.Size.
type DataPageSimpleItemSchema_Size struct {
	union json.RawMessage
}

// DataPageSimpleItemSchemaTotal0 defines model for .
type DataPageSimpleItemSchemaTotal0 = int

// DataPageSimpleItemSchemaTotal1 defines model for .
type DataPageSimpleItemSchemaTotal1 = interface{}

// DataPageSimpleItemSchema_Total defines model for DataPageSimpleItemSchema.Total.
type DataPageSimpleItemSchema_Total struct {
	union json.RawMessage
}

// DeleteItemResponseSchema defines model for DeleteItemResponseSchema.
type DeleteItemResponseSchema struct {
	Data DeleteItemSchema `json:"data"`
}

// DeleteItemSchema defines model for DeleteItemSchema.
type DeleteItemSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Item Item details.
	Item SimpleItemSchema `json:"item"`
}

// DepositWithdrawGoldSchema defines model for DepositWithdrawGoldSchema.
type DepositWithdrawGoldSchema struct {
	// Quantity Quantity of gold.
	Quantity int `json:"quantity"`
}

// DestinationResponseSchema defines model for DestinationResponseSchema.
type DestinationResponseSchema struct {
	// Content Content of the destination.
	Content interface{} `json:"content"`

	// Name The name of the destination.
	Name string `json:"name"`

	// X The x coordinate of the destination.
	X int `json:"x"`

	// Y The y coordinate of the destination.
	Y int `json:"y"`
}

// DestinationSchema defines model for DestinationSchema.
type DestinationSchema struct {
	// X The x coordinate of the destination.
	X int `json:"x"`

	// Y The y coordinate of the destination.
	Y int `json:"y"`
}

// DropRateSchema defines model for DropRateSchema.
type DropRateSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// MaxQuantity Maximum quantity.
	MaxQuantity int `json:"max_quantity"`

	// MinQuantity Minimum quantity.
	MinQuantity int `json:"min_quantity"`

	// Rate Chance rate.
	Rate int `json:"rate"`
}

// DropSchema defines model for DropSchema.
type DropSchema struct {
	// Code The code of the item.
	Code string `json:"code"`

	// Quantity The quantity of the item.
	Quantity int `json:"quantity"`
}

// EquipRequestSchema defines model for EquipRequestSchema.
type EquipRequestSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Item Item details.
	Item ItemSchema `json:"item"`

	// Slot Item slot.
	Slot EquipRequestSchemaSlot `json:"slot"`
}

// EquipRequestSchemaSlot Item slot.
type EquipRequestSchemaSlot string

// EquipSchema defines model for EquipSchema.
type EquipSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Slot Item slot.
	Slot EquipSchemaSlot `json:"slot"`
}

// EquipSchemaSlot Item slot.
type EquipSchemaSlot string

// EquipmentResponseSchema defines model for EquipmentResponseSchema.
type EquipmentResponseSchema struct {
	Data EquipRequestSchema `json:"data"`
}

// FightSchema defines model for FightSchema.
type FightSchema struct {
	// Drops The items dropped by the fight.
	Drops []DropSchema `json:"drops"`

	// Gold The amount of gold gained by the fight.
	Gold int `json:"gold"`

	// Logs The fight logs.
	Logs []string `json:"logs"`

	// MonsterBlockedHits The amount of blocked hits by the monster.
	MonsterBlockedHits BlockedHitsSchema `json:"monster_blocked_hits"`

	// PlayerBlockedHits The amount of blocked hits by the player.
	PlayerBlockedHits BlockedHitsSchema `json:"player_blocked_hits"`

	// Result The result of the fight.
	Result FightSchemaResult `json:"result"`

	// Turns Numbers of the turns of the combat.
	Turns int `json:"turns"`

	// Xp The amount of xp gained by the fight.
	Xp int `json:"xp"`
}

// FightSchemaResult The result of the fight.
type FightSchemaResult string

// GEItemResponseSchema defines model for GEItemResponseSchema.
type GEItemResponseSchema struct {
	Data GEItemSchema `json:"data"`
}

// GEItemSchema defines model for GEItemSchema.
type GEItemSchema struct {
	// BuyPrice The item's buying price.
	BuyPrice *int `json:"buy_price,omitempty"`

	// Code Item code.
	Code string `json:"code"`

	// SellPrice The item's selling price.
	SellPrice *int `json:"sell_price,omitempty"`

	// Stock Item stock.
	Stock int `json:"stock"`
}

// GETransactionItemSchema defines model for GETransactionItemSchema.
type GETransactionItemSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Price Item price. Item price validation protects you if the price has changed since you last checked the buy/sale price of an item.
	Price int `json:"price"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// GETransactionListSchema defines model for GETransactionListSchema.
type GETransactionListSchema struct {
	// Character Character details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Transaction Transaction details.
	Transaction GETransactionSchema `json:"transaction"`
}

// GETransactionResponseSchema defines model for GETransactionResponseSchema.
type GETransactionResponseSchema struct {
	Data GETransactionListSchema `json:"data"`
}

// GETransactionSchema defines model for GETransactionSchema.
type GETransactionSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Price Item price.
	Price int `json:"price"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`

	// TotalPrice Total price of the transaction.
	TotalPrice int `json:"total_price"`
}

// GoldBankResponseSchema defines model for GoldBankResponseSchema.
type GoldBankResponseSchema struct {
	Data GoldSchema `json:"data"`
}

// GoldResponseSchema defines model for GoldResponseSchema.
type GoldResponseSchema struct {
	Data GoldTransactionSchema `json:"data"`
}

// GoldSchema defines model for GoldSchema.
type GoldSchema struct {
	// Quantity Quantity of gold.
	Quantity int `json:"quantity"`
}

// GoldTransactionSchema defines model for GoldTransactionSchema.
type GoldTransactionSchema struct {
	// Bank Bank details.
	Bank GoldSchema `json:"bank"`

	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`
}

// InventorySlot defines model for InventorySlot.
type InventorySlot struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Quantity in the slot.
	Quantity int `json:"quantity"`

	// Slot Inventory slot identifier.
	Slot int `json:"slot"`
}

// ItemEffectSchema defines model for ItemEffectSchema.
type ItemEffectSchema struct {
	// Name Effect name.
	Name string `json:"name"`

	// Value Effect value.
	Value int `json:"value"`
}

// ItemResponseSchema defines model for ItemResponseSchema.
type ItemResponseSchema struct {
	Data SingleItemSchema `json:"data"`
}

// ItemSchema defines model for ItemSchema.
type ItemSchema struct {
	// Code Item code. This is the item's unique identifier (ID).
	Code string `json:"code"`

	// Craft Craft information. If applicable.
	Craft *ItemSchema_Craft `json:"craft,omitempty"`

	// Description Item description.
	Description string `json:"description"`

	// Effects List of object effects. For equipment, it will include item stats.
	Effects *[]ItemEffectSchema `json:"effects,omitempty"`

	// Level Item level.
	Level int `json:"level"`

	// Name Item name.
	Name string `json:"name"`

	// Subtype Item subtype.
	Subtype string `json:"subtype"`

	// Type Item type.
	Type string `json:"type"`
}

// ItemSchemaCraft1 defines model for .
type ItemSchemaCraft1 = interface{}

// ItemSchema_Craft Craft information. If applicable.
type ItemSchema_Craft struct {
	union json.RawMessage
}

// LogSchema defines model for LogSchema.
type LogSchema struct {
	// Account Account character.
	Account string `json:"account"`

	// Character Character name.
	Character string `json:"character"`

	// Content Content of action.
	Content interface{} `json:"content"`

	// Cooldown Cooldown in seconds.
	Cooldown int `json:"cooldown"`

	// CooldownExpiration Datetime of cooldown expiration.
	CooldownExpiration time.Time `json:"cooldown_expiration"`

	// CreatedAt Datetime of creation.
	CreatedAt time.Time `json:"created_at"`

	// Description Description of action.
	Description string `json:"description"`

	// Type Type of action.
	Type string `json:"type"`
}

// MapContentSchema defines model for MapContentSchema.
type MapContentSchema struct {
	// Code Code of the content.
	Code string `json:"code"`

	// Type Type of the content.
	Type string `json:"type"`
}

// MapResponseSchema defines model for MapResponseSchema.
type MapResponseSchema struct {
	Data MapSchema `json:"data"`
}

// MapSchema defines model for MapSchema.
type MapSchema struct {
	// Content Content of the map.
	Content MapSchema_Content `json:"content"`

	// Name Name of the map.
	Name string `json:"name"`

	// Skin Skin of the map.
	Skin string `json:"skin"`

	// X Position X of the map.
	X int `json:"x"`

	// Y Position Y of the map.
	Y int `json:"y"`
}

// MapSchemaContent1 defines model for .
type MapSchemaContent1 = interface{}

// MapSchema_Content Content of the map.
type MapSchema_Content struct {
	union json.RawMessage
}

// MonsterResponseSchema defines model for MonsterResponseSchema.
type MonsterResponseSchema struct {
	Data MonsterSchema `json:"data"`
}

// MonsterSchema defines model for MonsterSchema.
type MonsterSchema struct {
	// AttackAir Monster air attack.
	AttackAir int `json:"attack_air"`

	// AttackEarth Monster earth attack.
	AttackEarth int `json:"attack_earth"`

	// AttackFire Monster fire attack.
	AttackFire int `json:"attack_fire"`

	// AttackWater Monster water attack.
	AttackWater int `json:"attack_water"`

	// Code The code of the monster. This is the monster's unique identifier (ID).
	Code string `json:"code"`

	// Drops Monster drops. This is a list of items that the monster drops after killing the monster.
	Drops []DropRateSchema `json:"drops"`

	// Hp Monster hit points.
	Hp int `json:"hp"`

	// Level Monster level.
	Level int `json:"level"`

	// MaxGold Monster maximum gold drop.
	MaxGold int `json:"max_gold"`

	// MinGold Monster minimum gold drop.
	MinGold int `json:"min_gold"`

	// Name Name of the monster.
	Name string `json:"name"`

	// ResAir Monster % air resistance.
	ResAir int `json:"res_air"`

	// ResEarth Monster % earth resistance.
	ResEarth int `json:"res_earth"`

	// ResFire Monster % fire resistance.
	ResFire int `json:"res_fire"`

	// ResWater Monster % water resistance.
	ResWater int `json:"res_water"`
}

// MyCharactersListSchema defines model for MyCharactersListSchema.
type MyCharactersListSchema struct {
	// Data List of your characters.
	Data []CharacterSchema `json:"data"`
}

// RecyclingDataSchema defines model for RecyclingDataSchema.
type RecyclingDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Details Craft details.
	Details RecyclingItemsSchema `json:"details"`
}

// RecyclingItemsSchema defines model for RecyclingItemsSchema.
type RecyclingItemsSchema struct {
	// Items Objects received.
	Items []DropSchema `json:"items"`
}

// RecyclingResponseSchema defines model for RecyclingResponseSchema.
type RecyclingResponseSchema struct {
	Data RecyclingDataSchema `json:"data"`
}

// RecyclingSchema defines model for RecyclingSchema.
type RecyclingSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Quantity of items to recycle.
	Quantity *int `json:"quantity,omitempty"`
}

// ResourceResponseSchema defines model for ResourceResponseSchema.
type ResourceResponseSchema struct {
	Data ResourceSchema `json:"data"`
}

// ResourceSchema defines model for ResourceSchema.
type ResourceSchema struct {
	// Code The code of the resource. This is the resource's unique identifier (ID).
	Code string `json:"code"`

	// Drops The drops of this resource.
	Drops []DropRateSchema `json:"drops"`

	// Level The skill level required to gather this resource.
	Level int `json:"level"`

	// Name The name of the resource
	Name string `json:"name"`

	// Skill The skill required to gather this resource.
	Skill ResourceSchemaSkill `json:"skill"`
}

// ResourceSchemaSkill The skill required to gather this resource.
type ResourceSchemaSkill string

// ResponseSchema defines model for ResponseSchema.
type ResponseSchema struct {
	Message string `json:"message"`
}

// SimpleItemSchema defines model for SimpleItemSchema.
type SimpleItemSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// SingleItemSchema defines model for SingleItemSchema.
type SingleItemSchema struct {
	// Ge Grand Exchange information. If applicable.
	Ge *SingleItemSchema_Ge `json:"ge,omitempty"`

	// Item Item information.
	Item ItemSchema `json:"item"`
}

// SingleItemSchemaGe1 defines model for .
type SingleItemSchemaGe1 = interface{}

// SingleItemSchema_Ge Grand Exchange information. If applicable.
type SingleItemSchema_Ge struct {
	union json.RawMessage
}

// SkillDataSchema defines model for SkillDataSchema.
type SkillDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Details Craft details.
	Details SkillInfoSchema `json:"details"`
}

// SkillInfoSchema defines model for SkillInfoSchema.
type SkillInfoSchema struct {
	// Items Objects received.
	Items []DropSchema `json:"items"`

	// Xp The amount of xp gained.
	Xp int `json:"xp"`
}

// SkillResponseSchema defines model for SkillResponseSchema.
type SkillResponseSchema struct {
	Data SkillDataSchema `json:"data"`
}

// StatusResponseSchema defines model for StatusResponseSchema.
type StatusResponseSchema struct {
	Data StatusSchema `json:"data"`
}

// StatusSchema defines model for StatusSchema.
type StatusSchema struct {
	Announcements    *[]AnnouncementSchema `json:"announcements,omitempty"`
	CharactersOnline *int                  `json:"characters_online,omitempty"`

	// LastWipe Last server wipe.
	LastWipe string `json:"last_wipe"`

	// NextWipe Next server wipe.
	NextWipe string `json:"next_wipe"`

	// Status Server status
	Status string `json:"status"`

	// Version Game version.
	Version string `json:"version"`
}

// TaskDataSchema defines model for TaskDataSchema.
type TaskDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Task Task details.
	Task TaskSchema `json:"task"`
}

// TaskResponseSchema defines model for TaskResponseSchema.
type TaskResponseSchema struct {
	Data TaskDataSchema `json:"data"`
}

// TaskRewardDataSchema defines model for TaskRewardDataSchema.
type TaskRewardDataSchema struct {
	// Character Player details.
	Character CharacterSchema `json:"character"`

	// Cooldown Cooldown details.
	Cooldown CooldownSchema `json:"cooldown"`

	// Reward Reward details.
	Reward TaskRewardSchema `json:"reward"`
}

// TaskRewardResponseSchema defines model for TaskRewardResponseSchema.
type TaskRewardResponseSchema struct {
	Data TaskRewardDataSchema `json:"data"`
}

// TaskRewardSchema defines model for TaskRewardSchema.
type TaskRewardSchema struct {
	// Code Item code.
	Code string `json:"code"`

	// Quantity Item quantity.
	Quantity int `json:"quantity"`
}

// TaskSchema defines model for TaskSchema.
type TaskSchema struct {
	// Code Task objective.
	Code string `json:"code"`

	// Total The total required to complete the task.
	Total int `json:"total"`

	// Type The type of task.
	Type TaskSchemaType `json:"type"`
}

// TaskSchemaType The type of task.
type TaskSchemaType string

// TokenResponseSchema defines model for TokenResponseSchema.
type TokenResponseSchema struct {
	Token string `json:"token"`
}

// UnequipSchema defines model for UnequipSchema.
type UnequipSchema struct {
	// Slot Item slot.
	Slot UnequipSchemaSlot `json:"slot"`
}

// UnequipSchemaSlot Item slot.
type UnequipSchemaSlot string

// GetAllCharactersCharactersGetParams defines parameters for GetAllCharactersCharactersGet.
type GetAllCharactersCharactersGetParams struct {
	// Sort Default sort by combat total XP.
	Sort *GetAllCharactersCharactersGetParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllCharactersCharactersGetParamsSort defines parameters for GetAllCharactersCharactersGet.
type GetAllCharactersCharactersGetParamsSort string

// GetAllEventsEventsGetParams defines parameters for GetAllEventsEventsGet.
type GetAllEventsEventsGetParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllGeItemsGeGetParams defines parameters for GetAllGeItemsGeGet.
type GetAllGeItemsGeGetParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllItemsItemsGetParams defines parameters for GetAllItemsItemsGet.
type GetAllItemsItemsGetParams struct {
	// MinLevel Minimum level items.
	MinLevel *int `form:"min_level,omitempty" json:"min_level,omitempty"`

	// MaxLevel Maximum level items.
	MaxLevel *int `form:"max_level,omitempty" json:"max_level,omitempty"`

	// Name Name of the item.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Type Type of items.
	Type *GetAllItemsItemsGetParamsType `form:"type,omitempty" json:"type,omitempty"`

	// CraftSkill Skill to craft items.
	CraftSkill *GetAllItemsItemsGetParamsCraftSkill `form:"craft_skill,omitempty" json:"craft_skill,omitempty"`

	// CraftMaterial Item code of items used as material for crafting.
	CraftMaterial *string `form:"craft_material,omitempty" json:"craft_material,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllItemsItemsGetParamsType defines parameters for GetAllItemsItemsGet.
type GetAllItemsItemsGetParamsType string

// GetAllItemsItemsGetParamsCraftSkill defines parameters for GetAllItemsItemsGet.
type GetAllItemsItemsGetParamsCraftSkill string

// GetAllMapsMapsGetParams defines parameters for GetAllMapsMapsGet.
type GetAllMapsMapsGetParams struct {
	// ContentType Type of content on the map.
	ContentType *GetAllMapsMapsGetParamsContentType `form:"content_type,omitempty" json:"content_type,omitempty"`

	// ContentCode Content code on the map.
	ContentCode *string `form:"content_code,omitempty" json:"content_code,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllMapsMapsGetParamsContentType defines parameters for GetAllMapsMapsGet.
type GetAllMapsMapsGetParamsContentType string

// GetAllMonstersMonstersGetParams defines parameters for GetAllMonstersMonstersGet.
type GetAllMonstersMonstersGetParams struct {
	// MinLevel Monster minimum level.
	MinLevel *int `form:"min_level,omitempty" json:"min_level,omitempty"`

	// MaxLevel Monster maximum level.
	MaxLevel *int `form:"max_level,omitempty" json:"max_level,omitempty"`

	// Drop Item code of the drop.
	Drop *string `form:"drop,omitempty" json:"drop,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetBankItemsMyBankItemsGetParams defines parameters for GetBankItemsMyBankItemsGet.
type GetBankItemsMyBankItemsGetParams struct {
	// ItemCode Item to search in your bank.
	ItemCode *string `form:"item_code,omitempty" json:"item_code,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllCharactersLogsMyLogsGetParams defines parameters for GetAllCharactersLogsMyLogsGet.
type GetAllCharactersLogsMyLogsGetParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllResourcesResourcesGetParams defines parameters for GetAllResourcesResourcesGet.
type GetAllResourcesResourcesGetParams struct {
	// MinLevel Skill minimum level.
	MinLevel *int `form:"min_level,omitempty" json:"min_level,omitempty"`

	// MaxLevel Skill maximum level.
	MaxLevel *int `form:"max_level,omitempty" json:"max_level,omitempty"`

	// Skill The code of the skill.
	Skill *GetAllResourcesResourcesGetParamsSkill `form:"skill,omitempty" json:"skill,omitempty"`

	// Drop Item code of the drop.
	Drop *string `form:"drop,omitempty" json:"drop,omitempty"`

	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Size Page size
	Size *int `form:"size,omitempty" json:"size,omitempty"`
}

// GetAllResourcesResourcesGetParamsSkill defines parameters for GetAllResourcesResourcesGet.
type GetAllResourcesResourcesGetParamsSkill string

// CreateAccountAccountsCreatePostJSONRequestBody defines body for CreateAccountAccountsCreatePost for application/json ContentType.
type CreateAccountAccountsCreatePostJSONRequestBody = AddAccountSchema

// CreateCharacterCharactersCreatePostJSONRequestBody defines body for CreateCharacterCharactersCreatePost for application/json ContentType.
type CreateCharacterCharactersCreatePostJSONRequestBody = AddCharacterSchema

// ChangePasswordMyChangePasswordPostJSONRequestBody defines body for ChangePasswordMyChangePasswordPost for application/json ContentType.
type ChangePasswordMyChangePasswordPostJSONRequestBody = ChangePassword

// ActionDepositBankMyNameActionBankDepositPostJSONRequestBody defines body for ActionDepositBankMyNameActionBankDepositPost for application/json ContentType.
type ActionDepositBankMyNameActionBankDepositPostJSONRequestBody = SimpleItemSchema

// ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody defines body for ActionDepositBankGoldMyNameActionBankDepositGoldPost for application/json ContentType.
type ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody = DepositWithdrawGoldSchema

// ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody defines body for ActionWithdrawBankMyNameActionBankWithdrawPost for application/json ContentType.
type ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody = SimpleItemSchema

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody defines body for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost for application/json ContentType.
type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody = DepositWithdrawGoldSchema

// ActionCraftingMyNameActionCraftingPostJSONRequestBody defines body for ActionCraftingMyNameActionCraftingPost for application/json ContentType.
type ActionCraftingMyNameActionCraftingPostJSONRequestBody = CraftingSchema

// ActionDeleteItemMyNameActionDeletePostJSONRequestBody defines body for ActionDeleteItemMyNameActionDeletePost for application/json ContentType.
type ActionDeleteItemMyNameActionDeletePostJSONRequestBody = SimpleItemSchema

// ActionEquipItemMyNameActionEquipPostJSONRequestBody defines body for ActionEquipItemMyNameActionEquipPost for application/json ContentType.
type ActionEquipItemMyNameActionEquipPostJSONRequestBody = EquipSchema

// ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody defines body for ActionGeBuyItemMyNameActionGeBuyPost for application/json ContentType.
type ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody = GETransactionItemSchema

// ActionGeSellItemMyNameActionGeSellPostJSONRequestBody defines body for ActionGeSellItemMyNameActionGeSellPost for application/json ContentType.
type ActionGeSellItemMyNameActionGeSellPostJSONRequestBody = GETransactionItemSchema

// ActionMoveMyNameActionMovePostJSONRequestBody defines body for ActionMoveMyNameActionMovePost for application/json ContentType.
type ActionMoveMyNameActionMovePostJSONRequestBody = DestinationSchema

// ActionRecyclingMyNameActionRecyclingPostJSONRequestBody defines body for ActionRecyclingMyNameActionRecyclingPost for application/json ContentType.
type ActionRecyclingMyNameActionRecyclingPostJSONRequestBody = RecyclingSchema

// ActionUnequipItemMyNameActionUnequipPostJSONRequestBody defines body for ActionUnequipItemMyNameActionUnequipPost for application/json ContentType.
type ActionUnequipItemMyNameActionUnequipPostJSONRequestBody = UnequipSchema

// AsCharacterSchemaCooldownExpiration0 returns the union data inside the CharacterSchema_CooldownExpiration as a CharacterSchemaCooldownExpiration0
func (t CharacterSchema_CooldownExpiration) AsCharacterSchemaCooldownExpiration0() (CharacterSchemaCooldownExpiration0, error) {
	var body CharacterSchemaCooldownExpiration0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCharacterSchemaCooldownExpiration0 overwrites any union data inside the CharacterSchema_CooldownExpiration as the provided CharacterSchemaCooldownExpiration0
func (t *CharacterSchema_CooldownExpiration) FromCharacterSchemaCooldownExpiration0(v CharacterSchemaCooldownExpiration0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCharacterSchemaCooldownExpiration0 performs a merge with any union data inside the CharacterSchema_CooldownExpiration, using the provided CharacterSchemaCooldownExpiration0
func (t *CharacterSchema_CooldownExpiration) MergeCharacterSchemaCooldownExpiration0(v CharacterSchemaCooldownExpiration0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCharacterSchemaCooldownExpiration1 returns the union data inside the CharacterSchema_CooldownExpiration as a CharacterSchemaCooldownExpiration1
func (t CharacterSchema_CooldownExpiration) AsCharacterSchemaCooldownExpiration1() (CharacterSchemaCooldownExpiration1, error) {
	var body CharacterSchemaCooldownExpiration1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCharacterSchemaCooldownExpiration1 overwrites any union data inside the CharacterSchema_CooldownExpiration as the provided CharacterSchemaCooldownExpiration1
func (t *CharacterSchema_CooldownExpiration) FromCharacterSchemaCooldownExpiration1(v CharacterSchemaCooldownExpiration1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCharacterSchemaCooldownExpiration1 performs a merge with any union data inside the CharacterSchema_CooldownExpiration, using the provided CharacterSchemaCooldownExpiration1
func (t *CharacterSchema_CooldownExpiration) MergeCharacterSchemaCooldownExpiration1(v CharacterSchemaCooldownExpiration1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CharacterSchema_CooldownExpiration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CharacterSchema_CooldownExpiration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCraftSchemaLevel0 returns the union data inside the CraftSchema_Level as a CraftSchemaLevel0
func (t CraftSchema_Level) AsCraftSchemaLevel0() (CraftSchemaLevel0, error) {
	var body CraftSchemaLevel0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaLevel0 overwrites any union data inside the CraftSchema_Level as the provided CraftSchemaLevel0
func (t *CraftSchema_Level) FromCraftSchemaLevel0(v CraftSchemaLevel0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaLevel0 performs a merge with any union data inside the CraftSchema_Level, using the provided CraftSchemaLevel0
func (t *CraftSchema_Level) MergeCraftSchemaLevel0(v CraftSchemaLevel0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCraftSchemaLevel1 returns the union data inside the CraftSchema_Level as a CraftSchemaLevel1
func (t CraftSchema_Level) AsCraftSchemaLevel1() (CraftSchemaLevel1, error) {
	var body CraftSchemaLevel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaLevel1 overwrites any union data inside the CraftSchema_Level as the provided CraftSchemaLevel1
func (t *CraftSchema_Level) FromCraftSchemaLevel1(v CraftSchemaLevel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaLevel1 performs a merge with any union data inside the CraftSchema_Level, using the provided CraftSchemaLevel1
func (t *CraftSchema_Level) MergeCraftSchemaLevel1(v CraftSchemaLevel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CraftSchema_Level) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CraftSchema_Level) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCraftSchemaQuantity0 returns the union data inside the CraftSchema_Quantity as a CraftSchemaQuantity0
func (t CraftSchema_Quantity) AsCraftSchemaQuantity0() (CraftSchemaQuantity0, error) {
	var body CraftSchemaQuantity0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaQuantity0 overwrites any union data inside the CraftSchema_Quantity as the provided CraftSchemaQuantity0
func (t *CraftSchema_Quantity) FromCraftSchemaQuantity0(v CraftSchemaQuantity0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaQuantity0 performs a merge with any union data inside the CraftSchema_Quantity, using the provided CraftSchemaQuantity0
func (t *CraftSchema_Quantity) MergeCraftSchemaQuantity0(v CraftSchemaQuantity0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCraftSchemaQuantity1 returns the union data inside the CraftSchema_Quantity as a CraftSchemaQuantity1
func (t CraftSchema_Quantity) AsCraftSchemaQuantity1() (CraftSchemaQuantity1, error) {
	var body CraftSchemaQuantity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaQuantity1 overwrites any union data inside the CraftSchema_Quantity as the provided CraftSchemaQuantity1
func (t *CraftSchema_Quantity) FromCraftSchemaQuantity1(v CraftSchemaQuantity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaQuantity1 performs a merge with any union data inside the CraftSchema_Quantity, using the provided CraftSchemaQuantity1
func (t *CraftSchema_Quantity) MergeCraftSchemaQuantity1(v CraftSchemaQuantity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CraftSchema_Quantity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CraftSchema_Quantity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCraftSchemaSkill0 returns the union data inside the CraftSchema_Skill as a CraftSchemaSkill0
func (t CraftSchema_Skill) AsCraftSchemaSkill0() (CraftSchemaSkill0, error) {
	var body CraftSchemaSkill0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaSkill0 overwrites any union data inside the CraftSchema_Skill as the provided CraftSchemaSkill0
func (t *CraftSchema_Skill) FromCraftSchemaSkill0(v CraftSchemaSkill0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaSkill0 performs a merge with any union data inside the CraftSchema_Skill, using the provided CraftSchemaSkill0
func (t *CraftSchema_Skill) MergeCraftSchemaSkill0(v CraftSchemaSkill0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCraftSchemaSkill1 returns the union data inside the CraftSchema_Skill as a CraftSchemaSkill1
func (t CraftSchema_Skill) AsCraftSchemaSkill1() (CraftSchemaSkill1, error) {
	var body CraftSchemaSkill1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchemaSkill1 overwrites any union data inside the CraftSchema_Skill as the provided CraftSchemaSkill1
func (t *CraftSchema_Skill) FromCraftSchemaSkill1(v CraftSchemaSkill1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchemaSkill1 performs a merge with any union data inside the CraftSchema_Skill, using the provided CraftSchemaSkill1
func (t *CraftSchema_Skill) MergeCraftSchemaSkill1(v CraftSchemaSkill1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CraftSchema_Skill) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CraftSchema_Skill) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageActiveEventSchemaPage0 returns the union data inside the DataPageActiveEventSchema_Page as a DataPageActiveEventSchemaPage0
func (t DataPageActiveEventSchema_Page) AsDataPageActiveEventSchemaPage0() (DataPageActiveEventSchemaPage0, error) {
	var body DataPageActiveEventSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaPage0 overwrites any union data inside the DataPageActiveEventSchema_Page as the provided DataPageActiveEventSchemaPage0
func (t *DataPageActiveEventSchema_Page) FromDataPageActiveEventSchemaPage0(v DataPageActiveEventSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaPage0 performs a merge with any union data inside the DataPageActiveEventSchema_Page, using the provided DataPageActiveEventSchemaPage0
func (t *DataPageActiveEventSchema_Page) MergeDataPageActiveEventSchemaPage0(v DataPageActiveEventSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageActiveEventSchemaPage1 returns the union data inside the DataPageActiveEventSchema_Page as a DataPageActiveEventSchemaPage1
func (t DataPageActiveEventSchema_Page) AsDataPageActiveEventSchemaPage1() (DataPageActiveEventSchemaPage1, error) {
	var body DataPageActiveEventSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaPage1 overwrites any union data inside the DataPageActiveEventSchema_Page as the provided DataPageActiveEventSchemaPage1
func (t *DataPageActiveEventSchema_Page) FromDataPageActiveEventSchemaPage1(v DataPageActiveEventSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaPage1 performs a merge with any union data inside the DataPageActiveEventSchema_Page, using the provided DataPageActiveEventSchemaPage1
func (t *DataPageActiveEventSchema_Page) MergeDataPageActiveEventSchemaPage1(v DataPageActiveEventSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageActiveEventSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageActiveEventSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageActiveEventSchemaPages0 returns the union data inside the DataPageActiveEventSchema_Pages as a DataPageActiveEventSchemaPages0
func (t DataPageActiveEventSchema_Pages) AsDataPageActiveEventSchemaPages0() (DataPageActiveEventSchemaPages0, error) {
	var body DataPageActiveEventSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaPages0 overwrites any union data inside the DataPageActiveEventSchema_Pages as the provided DataPageActiveEventSchemaPages0
func (t *DataPageActiveEventSchema_Pages) FromDataPageActiveEventSchemaPages0(v DataPageActiveEventSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaPages0 performs a merge with any union data inside the DataPageActiveEventSchema_Pages, using the provided DataPageActiveEventSchemaPages0
func (t *DataPageActiveEventSchema_Pages) MergeDataPageActiveEventSchemaPages0(v DataPageActiveEventSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageActiveEventSchemaPages1 returns the union data inside the DataPageActiveEventSchema_Pages as a DataPageActiveEventSchemaPages1
func (t DataPageActiveEventSchema_Pages) AsDataPageActiveEventSchemaPages1() (DataPageActiveEventSchemaPages1, error) {
	var body DataPageActiveEventSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaPages1 overwrites any union data inside the DataPageActiveEventSchema_Pages as the provided DataPageActiveEventSchemaPages1
func (t *DataPageActiveEventSchema_Pages) FromDataPageActiveEventSchemaPages1(v DataPageActiveEventSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaPages1 performs a merge with any union data inside the DataPageActiveEventSchema_Pages, using the provided DataPageActiveEventSchemaPages1
func (t *DataPageActiveEventSchema_Pages) MergeDataPageActiveEventSchemaPages1(v DataPageActiveEventSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageActiveEventSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageActiveEventSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageActiveEventSchemaSize0 returns the union data inside the DataPageActiveEventSchema_Size as a DataPageActiveEventSchemaSize0
func (t DataPageActiveEventSchema_Size) AsDataPageActiveEventSchemaSize0() (DataPageActiveEventSchemaSize0, error) {
	var body DataPageActiveEventSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaSize0 overwrites any union data inside the DataPageActiveEventSchema_Size as the provided DataPageActiveEventSchemaSize0
func (t *DataPageActiveEventSchema_Size) FromDataPageActiveEventSchemaSize0(v DataPageActiveEventSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaSize0 performs a merge with any union data inside the DataPageActiveEventSchema_Size, using the provided DataPageActiveEventSchemaSize0
func (t *DataPageActiveEventSchema_Size) MergeDataPageActiveEventSchemaSize0(v DataPageActiveEventSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageActiveEventSchemaSize1 returns the union data inside the DataPageActiveEventSchema_Size as a DataPageActiveEventSchemaSize1
func (t DataPageActiveEventSchema_Size) AsDataPageActiveEventSchemaSize1() (DataPageActiveEventSchemaSize1, error) {
	var body DataPageActiveEventSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaSize1 overwrites any union data inside the DataPageActiveEventSchema_Size as the provided DataPageActiveEventSchemaSize1
func (t *DataPageActiveEventSchema_Size) FromDataPageActiveEventSchemaSize1(v DataPageActiveEventSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaSize1 performs a merge with any union data inside the DataPageActiveEventSchema_Size, using the provided DataPageActiveEventSchemaSize1
func (t *DataPageActiveEventSchema_Size) MergeDataPageActiveEventSchemaSize1(v DataPageActiveEventSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageActiveEventSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageActiveEventSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageActiveEventSchemaTotal0 returns the union data inside the DataPageActiveEventSchema_Total as a DataPageActiveEventSchemaTotal0
func (t DataPageActiveEventSchema_Total) AsDataPageActiveEventSchemaTotal0() (DataPageActiveEventSchemaTotal0, error) {
	var body DataPageActiveEventSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaTotal0 overwrites any union data inside the DataPageActiveEventSchema_Total as the provided DataPageActiveEventSchemaTotal0
func (t *DataPageActiveEventSchema_Total) FromDataPageActiveEventSchemaTotal0(v DataPageActiveEventSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaTotal0 performs a merge with any union data inside the DataPageActiveEventSchema_Total, using the provided DataPageActiveEventSchemaTotal0
func (t *DataPageActiveEventSchema_Total) MergeDataPageActiveEventSchemaTotal0(v DataPageActiveEventSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageActiveEventSchemaTotal1 returns the union data inside the DataPageActiveEventSchema_Total as a DataPageActiveEventSchemaTotal1
func (t DataPageActiveEventSchema_Total) AsDataPageActiveEventSchemaTotal1() (DataPageActiveEventSchemaTotal1, error) {
	var body DataPageActiveEventSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageActiveEventSchemaTotal1 overwrites any union data inside the DataPageActiveEventSchema_Total as the provided DataPageActiveEventSchemaTotal1
func (t *DataPageActiveEventSchema_Total) FromDataPageActiveEventSchemaTotal1(v DataPageActiveEventSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageActiveEventSchemaTotal1 performs a merge with any union data inside the DataPageActiveEventSchema_Total, using the provided DataPageActiveEventSchemaTotal1
func (t *DataPageActiveEventSchema_Total) MergeDataPageActiveEventSchemaTotal1(v DataPageActiveEventSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageActiveEventSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageActiveEventSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterSchemaPage0 returns the union data inside the DataPageCharacterSchema_Page as a DataPageCharacterSchemaPage0
func (t DataPageCharacterSchema_Page) AsDataPageCharacterSchemaPage0() (DataPageCharacterSchemaPage0, error) {
	var body DataPageCharacterSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaPage0 overwrites any union data inside the DataPageCharacterSchema_Page as the provided DataPageCharacterSchemaPage0
func (t *DataPageCharacterSchema_Page) FromDataPageCharacterSchemaPage0(v DataPageCharacterSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaPage0 performs a merge with any union data inside the DataPageCharacterSchema_Page, using the provided DataPageCharacterSchemaPage0
func (t *DataPageCharacterSchema_Page) MergeDataPageCharacterSchemaPage0(v DataPageCharacterSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterSchemaPage1 returns the union data inside the DataPageCharacterSchema_Page as a DataPageCharacterSchemaPage1
func (t DataPageCharacterSchema_Page) AsDataPageCharacterSchemaPage1() (DataPageCharacterSchemaPage1, error) {
	var body DataPageCharacterSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaPage1 overwrites any union data inside the DataPageCharacterSchema_Page as the provided DataPageCharacterSchemaPage1
func (t *DataPageCharacterSchema_Page) FromDataPageCharacterSchemaPage1(v DataPageCharacterSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaPage1 performs a merge with any union data inside the DataPageCharacterSchema_Page, using the provided DataPageCharacterSchemaPage1
func (t *DataPageCharacterSchema_Page) MergeDataPageCharacterSchemaPage1(v DataPageCharacterSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterSchemaPages0 returns the union data inside the DataPageCharacterSchema_Pages as a DataPageCharacterSchemaPages0
func (t DataPageCharacterSchema_Pages) AsDataPageCharacterSchemaPages0() (DataPageCharacterSchemaPages0, error) {
	var body DataPageCharacterSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaPages0 overwrites any union data inside the DataPageCharacterSchema_Pages as the provided DataPageCharacterSchemaPages0
func (t *DataPageCharacterSchema_Pages) FromDataPageCharacterSchemaPages0(v DataPageCharacterSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaPages0 performs a merge with any union data inside the DataPageCharacterSchema_Pages, using the provided DataPageCharacterSchemaPages0
func (t *DataPageCharacterSchema_Pages) MergeDataPageCharacterSchemaPages0(v DataPageCharacterSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterSchemaPages1 returns the union data inside the DataPageCharacterSchema_Pages as a DataPageCharacterSchemaPages1
func (t DataPageCharacterSchema_Pages) AsDataPageCharacterSchemaPages1() (DataPageCharacterSchemaPages1, error) {
	var body DataPageCharacterSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaPages1 overwrites any union data inside the DataPageCharacterSchema_Pages as the provided DataPageCharacterSchemaPages1
func (t *DataPageCharacterSchema_Pages) FromDataPageCharacterSchemaPages1(v DataPageCharacterSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaPages1 performs a merge with any union data inside the DataPageCharacterSchema_Pages, using the provided DataPageCharacterSchemaPages1
func (t *DataPageCharacterSchema_Pages) MergeDataPageCharacterSchemaPages1(v DataPageCharacterSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterSchemaSize0 returns the union data inside the DataPageCharacterSchema_Size as a DataPageCharacterSchemaSize0
func (t DataPageCharacterSchema_Size) AsDataPageCharacterSchemaSize0() (DataPageCharacterSchemaSize0, error) {
	var body DataPageCharacterSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaSize0 overwrites any union data inside the DataPageCharacterSchema_Size as the provided DataPageCharacterSchemaSize0
func (t *DataPageCharacterSchema_Size) FromDataPageCharacterSchemaSize0(v DataPageCharacterSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaSize0 performs a merge with any union data inside the DataPageCharacterSchema_Size, using the provided DataPageCharacterSchemaSize0
func (t *DataPageCharacterSchema_Size) MergeDataPageCharacterSchemaSize0(v DataPageCharacterSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterSchemaSize1 returns the union data inside the DataPageCharacterSchema_Size as a DataPageCharacterSchemaSize1
func (t DataPageCharacterSchema_Size) AsDataPageCharacterSchemaSize1() (DataPageCharacterSchemaSize1, error) {
	var body DataPageCharacterSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaSize1 overwrites any union data inside the DataPageCharacterSchema_Size as the provided DataPageCharacterSchemaSize1
func (t *DataPageCharacterSchema_Size) FromDataPageCharacterSchemaSize1(v DataPageCharacterSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaSize1 performs a merge with any union data inside the DataPageCharacterSchema_Size, using the provided DataPageCharacterSchemaSize1
func (t *DataPageCharacterSchema_Size) MergeDataPageCharacterSchemaSize1(v DataPageCharacterSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageCharacterSchemaTotal0 returns the union data inside the DataPageCharacterSchema_Total as a DataPageCharacterSchemaTotal0
func (t DataPageCharacterSchema_Total) AsDataPageCharacterSchemaTotal0() (DataPageCharacterSchemaTotal0, error) {
	var body DataPageCharacterSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaTotal0 overwrites any union data inside the DataPageCharacterSchema_Total as the provided DataPageCharacterSchemaTotal0
func (t *DataPageCharacterSchema_Total) FromDataPageCharacterSchemaTotal0(v DataPageCharacterSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaTotal0 performs a merge with any union data inside the DataPageCharacterSchema_Total, using the provided DataPageCharacterSchemaTotal0
func (t *DataPageCharacterSchema_Total) MergeDataPageCharacterSchemaTotal0(v DataPageCharacterSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageCharacterSchemaTotal1 returns the union data inside the DataPageCharacterSchema_Total as a DataPageCharacterSchemaTotal1
func (t DataPageCharacterSchema_Total) AsDataPageCharacterSchemaTotal1() (DataPageCharacterSchemaTotal1, error) {
	var body DataPageCharacterSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageCharacterSchemaTotal1 overwrites any union data inside the DataPageCharacterSchema_Total as the provided DataPageCharacterSchemaTotal1
func (t *DataPageCharacterSchema_Total) FromDataPageCharacterSchemaTotal1(v DataPageCharacterSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageCharacterSchemaTotal1 performs a merge with any union data inside the DataPageCharacterSchema_Total, using the provided DataPageCharacterSchemaTotal1
func (t *DataPageCharacterSchema_Total) MergeDataPageCharacterSchemaTotal1(v DataPageCharacterSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageCharacterSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageCharacterSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEItemSchemaPage0 returns the union data inside the DataPageGEItemSchema_Page as a DataPageGEItemSchemaPage0
func (t DataPageGEItemSchema_Page) AsDataPageGEItemSchemaPage0() (DataPageGEItemSchemaPage0, error) {
	var body DataPageGEItemSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaPage0 overwrites any union data inside the DataPageGEItemSchema_Page as the provided DataPageGEItemSchemaPage0
func (t *DataPageGEItemSchema_Page) FromDataPageGEItemSchemaPage0(v DataPageGEItemSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaPage0 performs a merge with any union data inside the DataPageGEItemSchema_Page, using the provided DataPageGEItemSchemaPage0
func (t *DataPageGEItemSchema_Page) MergeDataPageGEItemSchemaPage0(v DataPageGEItemSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEItemSchemaPage1 returns the union data inside the DataPageGEItemSchema_Page as a DataPageGEItemSchemaPage1
func (t DataPageGEItemSchema_Page) AsDataPageGEItemSchemaPage1() (DataPageGEItemSchemaPage1, error) {
	var body DataPageGEItemSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaPage1 overwrites any union data inside the DataPageGEItemSchema_Page as the provided DataPageGEItemSchemaPage1
func (t *DataPageGEItemSchema_Page) FromDataPageGEItemSchemaPage1(v DataPageGEItemSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaPage1 performs a merge with any union data inside the DataPageGEItemSchema_Page, using the provided DataPageGEItemSchemaPage1
func (t *DataPageGEItemSchema_Page) MergeDataPageGEItemSchemaPage1(v DataPageGEItemSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEItemSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEItemSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEItemSchemaPages0 returns the union data inside the DataPageGEItemSchema_Pages as a DataPageGEItemSchemaPages0
func (t DataPageGEItemSchema_Pages) AsDataPageGEItemSchemaPages0() (DataPageGEItemSchemaPages0, error) {
	var body DataPageGEItemSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaPages0 overwrites any union data inside the DataPageGEItemSchema_Pages as the provided DataPageGEItemSchemaPages0
func (t *DataPageGEItemSchema_Pages) FromDataPageGEItemSchemaPages0(v DataPageGEItemSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaPages0 performs a merge with any union data inside the DataPageGEItemSchema_Pages, using the provided DataPageGEItemSchemaPages0
func (t *DataPageGEItemSchema_Pages) MergeDataPageGEItemSchemaPages0(v DataPageGEItemSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEItemSchemaPages1 returns the union data inside the DataPageGEItemSchema_Pages as a DataPageGEItemSchemaPages1
func (t DataPageGEItemSchema_Pages) AsDataPageGEItemSchemaPages1() (DataPageGEItemSchemaPages1, error) {
	var body DataPageGEItemSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaPages1 overwrites any union data inside the DataPageGEItemSchema_Pages as the provided DataPageGEItemSchemaPages1
func (t *DataPageGEItemSchema_Pages) FromDataPageGEItemSchemaPages1(v DataPageGEItemSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaPages1 performs a merge with any union data inside the DataPageGEItemSchema_Pages, using the provided DataPageGEItemSchemaPages1
func (t *DataPageGEItemSchema_Pages) MergeDataPageGEItemSchemaPages1(v DataPageGEItemSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEItemSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEItemSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEItemSchemaSize0 returns the union data inside the DataPageGEItemSchema_Size as a DataPageGEItemSchemaSize0
func (t DataPageGEItemSchema_Size) AsDataPageGEItemSchemaSize0() (DataPageGEItemSchemaSize0, error) {
	var body DataPageGEItemSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaSize0 overwrites any union data inside the DataPageGEItemSchema_Size as the provided DataPageGEItemSchemaSize0
func (t *DataPageGEItemSchema_Size) FromDataPageGEItemSchemaSize0(v DataPageGEItemSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaSize0 performs a merge with any union data inside the DataPageGEItemSchema_Size, using the provided DataPageGEItemSchemaSize0
func (t *DataPageGEItemSchema_Size) MergeDataPageGEItemSchemaSize0(v DataPageGEItemSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEItemSchemaSize1 returns the union data inside the DataPageGEItemSchema_Size as a DataPageGEItemSchemaSize1
func (t DataPageGEItemSchema_Size) AsDataPageGEItemSchemaSize1() (DataPageGEItemSchemaSize1, error) {
	var body DataPageGEItemSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaSize1 overwrites any union data inside the DataPageGEItemSchema_Size as the provided DataPageGEItemSchemaSize1
func (t *DataPageGEItemSchema_Size) FromDataPageGEItemSchemaSize1(v DataPageGEItemSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaSize1 performs a merge with any union data inside the DataPageGEItemSchema_Size, using the provided DataPageGEItemSchemaSize1
func (t *DataPageGEItemSchema_Size) MergeDataPageGEItemSchemaSize1(v DataPageGEItemSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEItemSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEItemSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageGEItemSchemaTotal0 returns the union data inside the DataPageGEItemSchema_Total as a DataPageGEItemSchemaTotal0
func (t DataPageGEItemSchema_Total) AsDataPageGEItemSchemaTotal0() (DataPageGEItemSchemaTotal0, error) {
	var body DataPageGEItemSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaTotal0 overwrites any union data inside the DataPageGEItemSchema_Total as the provided DataPageGEItemSchemaTotal0
func (t *DataPageGEItemSchema_Total) FromDataPageGEItemSchemaTotal0(v DataPageGEItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaTotal0 performs a merge with any union data inside the DataPageGEItemSchema_Total, using the provided DataPageGEItemSchemaTotal0
func (t *DataPageGEItemSchema_Total) MergeDataPageGEItemSchemaTotal0(v DataPageGEItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageGEItemSchemaTotal1 returns the union data inside the DataPageGEItemSchema_Total as a DataPageGEItemSchemaTotal1
func (t DataPageGEItemSchema_Total) AsDataPageGEItemSchemaTotal1() (DataPageGEItemSchemaTotal1, error) {
	var body DataPageGEItemSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageGEItemSchemaTotal1 overwrites any union data inside the DataPageGEItemSchema_Total as the provided DataPageGEItemSchemaTotal1
func (t *DataPageGEItemSchema_Total) FromDataPageGEItemSchemaTotal1(v DataPageGEItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageGEItemSchemaTotal1 performs a merge with any union data inside the DataPageGEItemSchema_Total, using the provided DataPageGEItemSchemaTotal1
func (t *DataPageGEItemSchema_Total) MergeDataPageGEItemSchemaTotal1(v DataPageGEItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageGEItemSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageGEItemSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaPage0 returns the union data inside the DataPageItemSchema_Page as a DataPageItemSchemaPage0
func (t DataPageItemSchema_Page) AsDataPageItemSchemaPage0() (DataPageItemSchemaPage0, error) {
	var body DataPageItemSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPage0 overwrites any union data inside the DataPageItemSchema_Page as the provided DataPageItemSchemaPage0
func (t *DataPageItemSchema_Page) FromDataPageItemSchemaPage0(v DataPageItemSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPage0 performs a merge with any union data inside the DataPageItemSchema_Page, using the provided DataPageItemSchemaPage0
func (t *DataPageItemSchema_Page) MergeDataPageItemSchemaPage0(v DataPageItemSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaPage1 returns the union data inside the DataPageItemSchema_Page as a DataPageItemSchemaPage1
func (t DataPageItemSchema_Page) AsDataPageItemSchemaPage1() (DataPageItemSchemaPage1, error) {
	var body DataPageItemSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPage1 overwrites any union data inside the DataPageItemSchema_Page as the provided DataPageItemSchemaPage1
func (t *DataPageItemSchema_Page) FromDataPageItemSchemaPage1(v DataPageItemSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPage1 performs a merge with any union data inside the DataPageItemSchema_Page, using the provided DataPageItemSchemaPage1
func (t *DataPageItemSchema_Page) MergeDataPageItemSchemaPage1(v DataPageItemSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaPages0 returns the union data inside the DataPageItemSchema_Pages as a DataPageItemSchemaPages0
func (t DataPageItemSchema_Pages) AsDataPageItemSchemaPages0() (DataPageItemSchemaPages0, error) {
	var body DataPageItemSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPages0 overwrites any union data inside the DataPageItemSchema_Pages as the provided DataPageItemSchemaPages0
func (t *DataPageItemSchema_Pages) FromDataPageItemSchemaPages0(v DataPageItemSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPages0 performs a merge with any union data inside the DataPageItemSchema_Pages, using the provided DataPageItemSchemaPages0
func (t *DataPageItemSchema_Pages) MergeDataPageItemSchemaPages0(v DataPageItemSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaPages1 returns the union data inside the DataPageItemSchema_Pages as a DataPageItemSchemaPages1
func (t DataPageItemSchema_Pages) AsDataPageItemSchemaPages1() (DataPageItemSchemaPages1, error) {
	var body DataPageItemSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaPages1 overwrites any union data inside the DataPageItemSchema_Pages as the provided DataPageItemSchemaPages1
func (t *DataPageItemSchema_Pages) FromDataPageItemSchemaPages1(v DataPageItemSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaPages1 performs a merge with any union data inside the DataPageItemSchema_Pages, using the provided DataPageItemSchemaPages1
func (t *DataPageItemSchema_Pages) MergeDataPageItemSchemaPages1(v DataPageItemSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaSize0 returns the union data inside the DataPageItemSchema_Size as a DataPageItemSchemaSize0
func (t DataPageItemSchema_Size) AsDataPageItemSchemaSize0() (DataPageItemSchemaSize0, error) {
	var body DataPageItemSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaSize0 overwrites any union data inside the DataPageItemSchema_Size as the provided DataPageItemSchemaSize0
func (t *DataPageItemSchema_Size) FromDataPageItemSchemaSize0(v DataPageItemSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaSize0 performs a merge with any union data inside the DataPageItemSchema_Size, using the provided DataPageItemSchemaSize0
func (t *DataPageItemSchema_Size) MergeDataPageItemSchemaSize0(v DataPageItemSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaSize1 returns the union data inside the DataPageItemSchema_Size as a DataPageItemSchemaSize1
func (t DataPageItemSchema_Size) AsDataPageItemSchemaSize1() (DataPageItemSchemaSize1, error) {
	var body DataPageItemSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaSize1 overwrites any union data inside the DataPageItemSchema_Size as the provided DataPageItemSchemaSize1
func (t *DataPageItemSchema_Size) FromDataPageItemSchemaSize1(v DataPageItemSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaSize1 performs a merge with any union data inside the DataPageItemSchema_Size, using the provided DataPageItemSchemaSize1
func (t *DataPageItemSchema_Size) MergeDataPageItemSchemaSize1(v DataPageItemSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageItemSchemaTotal0 returns the union data inside the DataPageItemSchema_Total as a DataPageItemSchemaTotal0
func (t DataPageItemSchema_Total) AsDataPageItemSchemaTotal0() (DataPageItemSchemaTotal0, error) {
	var body DataPageItemSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaTotal0 overwrites any union data inside the DataPageItemSchema_Total as the provided DataPageItemSchemaTotal0
func (t *DataPageItemSchema_Total) FromDataPageItemSchemaTotal0(v DataPageItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaTotal0 performs a merge with any union data inside the DataPageItemSchema_Total, using the provided DataPageItemSchemaTotal0
func (t *DataPageItemSchema_Total) MergeDataPageItemSchemaTotal0(v DataPageItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageItemSchemaTotal1 returns the union data inside the DataPageItemSchema_Total as a DataPageItemSchemaTotal1
func (t DataPageItemSchema_Total) AsDataPageItemSchemaTotal1() (DataPageItemSchemaTotal1, error) {
	var body DataPageItemSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageItemSchemaTotal1 overwrites any union data inside the DataPageItemSchema_Total as the provided DataPageItemSchemaTotal1
func (t *DataPageItemSchema_Total) FromDataPageItemSchemaTotal1(v DataPageItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageItemSchemaTotal1 performs a merge with any union data inside the DataPageItemSchema_Total, using the provided DataPageItemSchemaTotal1
func (t *DataPageItemSchema_Total) MergeDataPageItemSchemaTotal1(v DataPageItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageItemSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageItemSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaPage0 returns the union data inside the DataPageLogSchema_Page as a DataPageLogSchemaPage0
func (t DataPageLogSchema_Page) AsDataPageLogSchemaPage0() (DataPageLogSchemaPage0, error) {
	var body DataPageLogSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPage0 overwrites any union data inside the DataPageLogSchema_Page as the provided DataPageLogSchemaPage0
func (t *DataPageLogSchema_Page) FromDataPageLogSchemaPage0(v DataPageLogSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPage0 performs a merge with any union data inside the DataPageLogSchema_Page, using the provided DataPageLogSchemaPage0
func (t *DataPageLogSchema_Page) MergeDataPageLogSchemaPage0(v DataPageLogSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaPage1 returns the union data inside the DataPageLogSchema_Page as a DataPageLogSchemaPage1
func (t DataPageLogSchema_Page) AsDataPageLogSchemaPage1() (DataPageLogSchemaPage1, error) {
	var body DataPageLogSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPage1 overwrites any union data inside the DataPageLogSchema_Page as the provided DataPageLogSchemaPage1
func (t *DataPageLogSchema_Page) FromDataPageLogSchemaPage1(v DataPageLogSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPage1 performs a merge with any union data inside the DataPageLogSchema_Page, using the provided DataPageLogSchemaPage1
func (t *DataPageLogSchema_Page) MergeDataPageLogSchemaPage1(v DataPageLogSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaPages0 returns the union data inside the DataPageLogSchema_Pages as a DataPageLogSchemaPages0
func (t DataPageLogSchema_Pages) AsDataPageLogSchemaPages0() (DataPageLogSchemaPages0, error) {
	var body DataPageLogSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPages0 overwrites any union data inside the DataPageLogSchema_Pages as the provided DataPageLogSchemaPages0
func (t *DataPageLogSchema_Pages) FromDataPageLogSchemaPages0(v DataPageLogSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPages0 performs a merge with any union data inside the DataPageLogSchema_Pages, using the provided DataPageLogSchemaPages0
func (t *DataPageLogSchema_Pages) MergeDataPageLogSchemaPages0(v DataPageLogSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaPages1 returns the union data inside the DataPageLogSchema_Pages as a DataPageLogSchemaPages1
func (t DataPageLogSchema_Pages) AsDataPageLogSchemaPages1() (DataPageLogSchemaPages1, error) {
	var body DataPageLogSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaPages1 overwrites any union data inside the DataPageLogSchema_Pages as the provided DataPageLogSchemaPages1
func (t *DataPageLogSchema_Pages) FromDataPageLogSchemaPages1(v DataPageLogSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaPages1 performs a merge with any union data inside the DataPageLogSchema_Pages, using the provided DataPageLogSchemaPages1
func (t *DataPageLogSchema_Pages) MergeDataPageLogSchemaPages1(v DataPageLogSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaSize0 returns the union data inside the DataPageLogSchema_Size as a DataPageLogSchemaSize0
func (t DataPageLogSchema_Size) AsDataPageLogSchemaSize0() (DataPageLogSchemaSize0, error) {
	var body DataPageLogSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaSize0 overwrites any union data inside the DataPageLogSchema_Size as the provided DataPageLogSchemaSize0
func (t *DataPageLogSchema_Size) FromDataPageLogSchemaSize0(v DataPageLogSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaSize0 performs a merge with any union data inside the DataPageLogSchema_Size, using the provided DataPageLogSchemaSize0
func (t *DataPageLogSchema_Size) MergeDataPageLogSchemaSize0(v DataPageLogSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaSize1 returns the union data inside the DataPageLogSchema_Size as a DataPageLogSchemaSize1
func (t DataPageLogSchema_Size) AsDataPageLogSchemaSize1() (DataPageLogSchemaSize1, error) {
	var body DataPageLogSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaSize1 overwrites any union data inside the DataPageLogSchema_Size as the provided DataPageLogSchemaSize1
func (t *DataPageLogSchema_Size) FromDataPageLogSchemaSize1(v DataPageLogSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaSize1 performs a merge with any union data inside the DataPageLogSchema_Size, using the provided DataPageLogSchemaSize1
func (t *DataPageLogSchema_Size) MergeDataPageLogSchemaSize1(v DataPageLogSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageLogSchemaTotal0 returns the union data inside the DataPageLogSchema_Total as a DataPageLogSchemaTotal0
func (t DataPageLogSchema_Total) AsDataPageLogSchemaTotal0() (DataPageLogSchemaTotal0, error) {
	var body DataPageLogSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaTotal0 overwrites any union data inside the DataPageLogSchema_Total as the provided DataPageLogSchemaTotal0
func (t *DataPageLogSchema_Total) FromDataPageLogSchemaTotal0(v DataPageLogSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaTotal0 performs a merge with any union data inside the DataPageLogSchema_Total, using the provided DataPageLogSchemaTotal0
func (t *DataPageLogSchema_Total) MergeDataPageLogSchemaTotal0(v DataPageLogSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageLogSchemaTotal1 returns the union data inside the DataPageLogSchema_Total as a DataPageLogSchemaTotal1
func (t DataPageLogSchema_Total) AsDataPageLogSchemaTotal1() (DataPageLogSchemaTotal1, error) {
	var body DataPageLogSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageLogSchemaTotal1 overwrites any union data inside the DataPageLogSchema_Total as the provided DataPageLogSchemaTotal1
func (t *DataPageLogSchema_Total) FromDataPageLogSchemaTotal1(v DataPageLogSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageLogSchemaTotal1 performs a merge with any union data inside the DataPageLogSchema_Total, using the provided DataPageLogSchemaTotal1
func (t *DataPageLogSchema_Total) MergeDataPageLogSchemaTotal1(v DataPageLogSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageLogSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageLogSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaPage0 returns the union data inside the DataPageMapSchema_Page as a DataPageMapSchemaPage0
func (t DataPageMapSchema_Page) AsDataPageMapSchemaPage0() (DataPageMapSchemaPage0, error) {
	var body DataPageMapSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPage0 overwrites any union data inside the DataPageMapSchema_Page as the provided DataPageMapSchemaPage0
func (t *DataPageMapSchema_Page) FromDataPageMapSchemaPage0(v DataPageMapSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPage0 performs a merge with any union data inside the DataPageMapSchema_Page, using the provided DataPageMapSchemaPage0
func (t *DataPageMapSchema_Page) MergeDataPageMapSchemaPage0(v DataPageMapSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaPage1 returns the union data inside the DataPageMapSchema_Page as a DataPageMapSchemaPage1
func (t DataPageMapSchema_Page) AsDataPageMapSchemaPage1() (DataPageMapSchemaPage1, error) {
	var body DataPageMapSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPage1 overwrites any union data inside the DataPageMapSchema_Page as the provided DataPageMapSchemaPage1
func (t *DataPageMapSchema_Page) FromDataPageMapSchemaPage1(v DataPageMapSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPage1 performs a merge with any union data inside the DataPageMapSchema_Page, using the provided DataPageMapSchemaPage1
func (t *DataPageMapSchema_Page) MergeDataPageMapSchemaPage1(v DataPageMapSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaPages0 returns the union data inside the DataPageMapSchema_Pages as a DataPageMapSchemaPages0
func (t DataPageMapSchema_Pages) AsDataPageMapSchemaPages0() (DataPageMapSchemaPages0, error) {
	var body DataPageMapSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPages0 overwrites any union data inside the DataPageMapSchema_Pages as the provided DataPageMapSchemaPages0
func (t *DataPageMapSchema_Pages) FromDataPageMapSchemaPages0(v DataPageMapSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPages0 performs a merge with any union data inside the DataPageMapSchema_Pages, using the provided DataPageMapSchemaPages0
func (t *DataPageMapSchema_Pages) MergeDataPageMapSchemaPages0(v DataPageMapSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaPages1 returns the union data inside the DataPageMapSchema_Pages as a DataPageMapSchemaPages1
func (t DataPageMapSchema_Pages) AsDataPageMapSchemaPages1() (DataPageMapSchemaPages1, error) {
	var body DataPageMapSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaPages1 overwrites any union data inside the DataPageMapSchema_Pages as the provided DataPageMapSchemaPages1
func (t *DataPageMapSchema_Pages) FromDataPageMapSchemaPages1(v DataPageMapSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaPages1 performs a merge with any union data inside the DataPageMapSchema_Pages, using the provided DataPageMapSchemaPages1
func (t *DataPageMapSchema_Pages) MergeDataPageMapSchemaPages1(v DataPageMapSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaSize0 returns the union data inside the DataPageMapSchema_Size as a DataPageMapSchemaSize0
func (t DataPageMapSchema_Size) AsDataPageMapSchemaSize0() (DataPageMapSchemaSize0, error) {
	var body DataPageMapSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaSize0 overwrites any union data inside the DataPageMapSchema_Size as the provided DataPageMapSchemaSize0
func (t *DataPageMapSchema_Size) FromDataPageMapSchemaSize0(v DataPageMapSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaSize0 performs a merge with any union data inside the DataPageMapSchema_Size, using the provided DataPageMapSchemaSize0
func (t *DataPageMapSchema_Size) MergeDataPageMapSchemaSize0(v DataPageMapSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaSize1 returns the union data inside the DataPageMapSchema_Size as a DataPageMapSchemaSize1
func (t DataPageMapSchema_Size) AsDataPageMapSchemaSize1() (DataPageMapSchemaSize1, error) {
	var body DataPageMapSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaSize1 overwrites any union data inside the DataPageMapSchema_Size as the provided DataPageMapSchemaSize1
func (t *DataPageMapSchema_Size) FromDataPageMapSchemaSize1(v DataPageMapSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaSize1 performs a merge with any union data inside the DataPageMapSchema_Size, using the provided DataPageMapSchemaSize1
func (t *DataPageMapSchema_Size) MergeDataPageMapSchemaSize1(v DataPageMapSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMapSchemaTotal0 returns the union data inside the DataPageMapSchema_Total as a DataPageMapSchemaTotal0
func (t DataPageMapSchema_Total) AsDataPageMapSchemaTotal0() (DataPageMapSchemaTotal0, error) {
	var body DataPageMapSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaTotal0 overwrites any union data inside the DataPageMapSchema_Total as the provided DataPageMapSchemaTotal0
func (t *DataPageMapSchema_Total) FromDataPageMapSchemaTotal0(v DataPageMapSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaTotal0 performs a merge with any union data inside the DataPageMapSchema_Total, using the provided DataPageMapSchemaTotal0
func (t *DataPageMapSchema_Total) MergeDataPageMapSchemaTotal0(v DataPageMapSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMapSchemaTotal1 returns the union data inside the DataPageMapSchema_Total as a DataPageMapSchemaTotal1
func (t DataPageMapSchema_Total) AsDataPageMapSchemaTotal1() (DataPageMapSchemaTotal1, error) {
	var body DataPageMapSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMapSchemaTotal1 overwrites any union data inside the DataPageMapSchema_Total as the provided DataPageMapSchemaTotal1
func (t *DataPageMapSchema_Total) FromDataPageMapSchemaTotal1(v DataPageMapSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMapSchemaTotal1 performs a merge with any union data inside the DataPageMapSchema_Total, using the provided DataPageMapSchemaTotal1
func (t *DataPageMapSchema_Total) MergeDataPageMapSchemaTotal1(v DataPageMapSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMapSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMapSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaPage0 returns the union data inside the DataPageMonsterSchema_Page as a DataPageMonsterSchemaPage0
func (t DataPageMonsterSchema_Page) AsDataPageMonsterSchemaPage0() (DataPageMonsterSchemaPage0, error) {
	var body DataPageMonsterSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPage0 overwrites any union data inside the DataPageMonsterSchema_Page as the provided DataPageMonsterSchemaPage0
func (t *DataPageMonsterSchema_Page) FromDataPageMonsterSchemaPage0(v DataPageMonsterSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPage0 performs a merge with any union data inside the DataPageMonsterSchema_Page, using the provided DataPageMonsterSchemaPage0
func (t *DataPageMonsterSchema_Page) MergeDataPageMonsterSchemaPage0(v DataPageMonsterSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaPage1 returns the union data inside the DataPageMonsterSchema_Page as a DataPageMonsterSchemaPage1
func (t DataPageMonsterSchema_Page) AsDataPageMonsterSchemaPage1() (DataPageMonsterSchemaPage1, error) {
	var body DataPageMonsterSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPage1 overwrites any union data inside the DataPageMonsterSchema_Page as the provided DataPageMonsterSchemaPage1
func (t *DataPageMonsterSchema_Page) FromDataPageMonsterSchemaPage1(v DataPageMonsterSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPage1 performs a merge with any union data inside the DataPageMonsterSchema_Page, using the provided DataPageMonsterSchemaPage1
func (t *DataPageMonsterSchema_Page) MergeDataPageMonsterSchemaPage1(v DataPageMonsterSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaPages0 returns the union data inside the DataPageMonsterSchema_Pages as a DataPageMonsterSchemaPages0
func (t DataPageMonsterSchema_Pages) AsDataPageMonsterSchemaPages0() (DataPageMonsterSchemaPages0, error) {
	var body DataPageMonsterSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPages0 overwrites any union data inside the DataPageMonsterSchema_Pages as the provided DataPageMonsterSchemaPages0
func (t *DataPageMonsterSchema_Pages) FromDataPageMonsterSchemaPages0(v DataPageMonsterSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPages0 performs a merge with any union data inside the DataPageMonsterSchema_Pages, using the provided DataPageMonsterSchemaPages0
func (t *DataPageMonsterSchema_Pages) MergeDataPageMonsterSchemaPages0(v DataPageMonsterSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaPages1 returns the union data inside the DataPageMonsterSchema_Pages as a DataPageMonsterSchemaPages1
func (t DataPageMonsterSchema_Pages) AsDataPageMonsterSchemaPages1() (DataPageMonsterSchemaPages1, error) {
	var body DataPageMonsterSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaPages1 overwrites any union data inside the DataPageMonsterSchema_Pages as the provided DataPageMonsterSchemaPages1
func (t *DataPageMonsterSchema_Pages) FromDataPageMonsterSchemaPages1(v DataPageMonsterSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaPages1 performs a merge with any union data inside the DataPageMonsterSchema_Pages, using the provided DataPageMonsterSchemaPages1
func (t *DataPageMonsterSchema_Pages) MergeDataPageMonsterSchemaPages1(v DataPageMonsterSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaSize0 returns the union data inside the DataPageMonsterSchema_Size as a DataPageMonsterSchemaSize0
func (t DataPageMonsterSchema_Size) AsDataPageMonsterSchemaSize0() (DataPageMonsterSchemaSize0, error) {
	var body DataPageMonsterSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaSize0 overwrites any union data inside the DataPageMonsterSchema_Size as the provided DataPageMonsterSchemaSize0
func (t *DataPageMonsterSchema_Size) FromDataPageMonsterSchemaSize0(v DataPageMonsterSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaSize0 performs a merge with any union data inside the DataPageMonsterSchema_Size, using the provided DataPageMonsterSchemaSize0
func (t *DataPageMonsterSchema_Size) MergeDataPageMonsterSchemaSize0(v DataPageMonsterSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaSize1 returns the union data inside the DataPageMonsterSchema_Size as a DataPageMonsterSchemaSize1
func (t DataPageMonsterSchema_Size) AsDataPageMonsterSchemaSize1() (DataPageMonsterSchemaSize1, error) {
	var body DataPageMonsterSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaSize1 overwrites any union data inside the DataPageMonsterSchema_Size as the provided DataPageMonsterSchemaSize1
func (t *DataPageMonsterSchema_Size) FromDataPageMonsterSchemaSize1(v DataPageMonsterSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaSize1 performs a merge with any union data inside the DataPageMonsterSchema_Size, using the provided DataPageMonsterSchemaSize1
func (t *DataPageMonsterSchema_Size) MergeDataPageMonsterSchemaSize1(v DataPageMonsterSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageMonsterSchemaTotal0 returns the union data inside the DataPageMonsterSchema_Total as a DataPageMonsterSchemaTotal0
func (t DataPageMonsterSchema_Total) AsDataPageMonsterSchemaTotal0() (DataPageMonsterSchemaTotal0, error) {
	var body DataPageMonsterSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaTotal0 overwrites any union data inside the DataPageMonsterSchema_Total as the provided DataPageMonsterSchemaTotal0
func (t *DataPageMonsterSchema_Total) FromDataPageMonsterSchemaTotal0(v DataPageMonsterSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaTotal0 performs a merge with any union data inside the DataPageMonsterSchema_Total, using the provided DataPageMonsterSchemaTotal0
func (t *DataPageMonsterSchema_Total) MergeDataPageMonsterSchemaTotal0(v DataPageMonsterSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageMonsterSchemaTotal1 returns the union data inside the DataPageMonsterSchema_Total as a DataPageMonsterSchemaTotal1
func (t DataPageMonsterSchema_Total) AsDataPageMonsterSchemaTotal1() (DataPageMonsterSchemaTotal1, error) {
	var body DataPageMonsterSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageMonsterSchemaTotal1 overwrites any union data inside the DataPageMonsterSchema_Total as the provided DataPageMonsterSchemaTotal1
func (t *DataPageMonsterSchema_Total) FromDataPageMonsterSchemaTotal1(v DataPageMonsterSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageMonsterSchemaTotal1 performs a merge with any union data inside the DataPageMonsterSchema_Total, using the provided DataPageMonsterSchemaTotal1
func (t *DataPageMonsterSchema_Total) MergeDataPageMonsterSchemaTotal1(v DataPageMonsterSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageMonsterSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageMonsterSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaPage0 returns the union data inside the DataPageResourceSchema_Page as a DataPageResourceSchemaPage0
func (t DataPageResourceSchema_Page) AsDataPageResourceSchemaPage0() (DataPageResourceSchemaPage0, error) {
	var body DataPageResourceSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPage0 overwrites any union data inside the DataPageResourceSchema_Page as the provided DataPageResourceSchemaPage0
func (t *DataPageResourceSchema_Page) FromDataPageResourceSchemaPage0(v DataPageResourceSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPage0 performs a merge with any union data inside the DataPageResourceSchema_Page, using the provided DataPageResourceSchemaPage0
func (t *DataPageResourceSchema_Page) MergeDataPageResourceSchemaPage0(v DataPageResourceSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaPage1 returns the union data inside the DataPageResourceSchema_Page as a DataPageResourceSchemaPage1
func (t DataPageResourceSchema_Page) AsDataPageResourceSchemaPage1() (DataPageResourceSchemaPage1, error) {
	var body DataPageResourceSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPage1 overwrites any union data inside the DataPageResourceSchema_Page as the provided DataPageResourceSchemaPage1
func (t *DataPageResourceSchema_Page) FromDataPageResourceSchemaPage1(v DataPageResourceSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPage1 performs a merge with any union data inside the DataPageResourceSchema_Page, using the provided DataPageResourceSchemaPage1
func (t *DataPageResourceSchema_Page) MergeDataPageResourceSchemaPage1(v DataPageResourceSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaPages0 returns the union data inside the DataPageResourceSchema_Pages as a DataPageResourceSchemaPages0
func (t DataPageResourceSchema_Pages) AsDataPageResourceSchemaPages0() (DataPageResourceSchemaPages0, error) {
	var body DataPageResourceSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPages0 overwrites any union data inside the DataPageResourceSchema_Pages as the provided DataPageResourceSchemaPages0
func (t *DataPageResourceSchema_Pages) FromDataPageResourceSchemaPages0(v DataPageResourceSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPages0 performs a merge with any union data inside the DataPageResourceSchema_Pages, using the provided DataPageResourceSchemaPages0
func (t *DataPageResourceSchema_Pages) MergeDataPageResourceSchemaPages0(v DataPageResourceSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaPages1 returns the union data inside the DataPageResourceSchema_Pages as a DataPageResourceSchemaPages1
func (t DataPageResourceSchema_Pages) AsDataPageResourceSchemaPages1() (DataPageResourceSchemaPages1, error) {
	var body DataPageResourceSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaPages1 overwrites any union data inside the DataPageResourceSchema_Pages as the provided DataPageResourceSchemaPages1
func (t *DataPageResourceSchema_Pages) FromDataPageResourceSchemaPages1(v DataPageResourceSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaPages1 performs a merge with any union data inside the DataPageResourceSchema_Pages, using the provided DataPageResourceSchemaPages1
func (t *DataPageResourceSchema_Pages) MergeDataPageResourceSchemaPages1(v DataPageResourceSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaSize0 returns the union data inside the DataPageResourceSchema_Size as a DataPageResourceSchemaSize0
func (t DataPageResourceSchema_Size) AsDataPageResourceSchemaSize0() (DataPageResourceSchemaSize0, error) {
	var body DataPageResourceSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaSize0 overwrites any union data inside the DataPageResourceSchema_Size as the provided DataPageResourceSchemaSize0
func (t *DataPageResourceSchema_Size) FromDataPageResourceSchemaSize0(v DataPageResourceSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaSize0 performs a merge with any union data inside the DataPageResourceSchema_Size, using the provided DataPageResourceSchemaSize0
func (t *DataPageResourceSchema_Size) MergeDataPageResourceSchemaSize0(v DataPageResourceSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaSize1 returns the union data inside the DataPageResourceSchema_Size as a DataPageResourceSchemaSize1
func (t DataPageResourceSchema_Size) AsDataPageResourceSchemaSize1() (DataPageResourceSchemaSize1, error) {
	var body DataPageResourceSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaSize1 overwrites any union data inside the DataPageResourceSchema_Size as the provided DataPageResourceSchemaSize1
func (t *DataPageResourceSchema_Size) FromDataPageResourceSchemaSize1(v DataPageResourceSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaSize1 performs a merge with any union data inside the DataPageResourceSchema_Size, using the provided DataPageResourceSchemaSize1
func (t *DataPageResourceSchema_Size) MergeDataPageResourceSchemaSize1(v DataPageResourceSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageResourceSchemaTotal0 returns the union data inside the DataPageResourceSchema_Total as a DataPageResourceSchemaTotal0
func (t DataPageResourceSchema_Total) AsDataPageResourceSchemaTotal0() (DataPageResourceSchemaTotal0, error) {
	var body DataPageResourceSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaTotal0 overwrites any union data inside the DataPageResourceSchema_Total as the provided DataPageResourceSchemaTotal0
func (t *DataPageResourceSchema_Total) FromDataPageResourceSchemaTotal0(v DataPageResourceSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaTotal0 performs a merge with any union data inside the DataPageResourceSchema_Total, using the provided DataPageResourceSchemaTotal0
func (t *DataPageResourceSchema_Total) MergeDataPageResourceSchemaTotal0(v DataPageResourceSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageResourceSchemaTotal1 returns the union data inside the DataPageResourceSchema_Total as a DataPageResourceSchemaTotal1
func (t DataPageResourceSchema_Total) AsDataPageResourceSchemaTotal1() (DataPageResourceSchemaTotal1, error) {
	var body DataPageResourceSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageResourceSchemaTotal1 overwrites any union data inside the DataPageResourceSchema_Total as the provided DataPageResourceSchemaTotal1
func (t *DataPageResourceSchema_Total) FromDataPageResourceSchemaTotal1(v DataPageResourceSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageResourceSchemaTotal1 performs a merge with any union data inside the DataPageResourceSchema_Total, using the provided DataPageResourceSchemaTotal1
func (t *DataPageResourceSchema_Total) MergeDataPageResourceSchemaTotal1(v DataPageResourceSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageResourceSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageResourceSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaPage0 returns the union data inside the DataPageSimpleItemSchema_Page as a DataPageSimpleItemSchemaPage0
func (t DataPageSimpleItemSchema_Page) AsDataPageSimpleItemSchemaPage0() (DataPageSimpleItemSchemaPage0, error) {
	var body DataPageSimpleItemSchemaPage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPage0 overwrites any union data inside the DataPageSimpleItemSchema_Page as the provided DataPageSimpleItemSchemaPage0
func (t *DataPageSimpleItemSchema_Page) FromDataPageSimpleItemSchemaPage0(v DataPageSimpleItemSchemaPage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPage0 performs a merge with any union data inside the DataPageSimpleItemSchema_Page, using the provided DataPageSimpleItemSchemaPage0
func (t *DataPageSimpleItemSchema_Page) MergeDataPageSimpleItemSchemaPage0(v DataPageSimpleItemSchemaPage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaPage1 returns the union data inside the DataPageSimpleItemSchema_Page as a DataPageSimpleItemSchemaPage1
func (t DataPageSimpleItemSchema_Page) AsDataPageSimpleItemSchemaPage1() (DataPageSimpleItemSchemaPage1, error) {
	var body DataPageSimpleItemSchemaPage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPage1 overwrites any union data inside the DataPageSimpleItemSchema_Page as the provided DataPageSimpleItemSchemaPage1
func (t *DataPageSimpleItemSchema_Page) FromDataPageSimpleItemSchemaPage1(v DataPageSimpleItemSchemaPage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPage1 performs a merge with any union data inside the DataPageSimpleItemSchema_Page, using the provided DataPageSimpleItemSchemaPage1
func (t *DataPageSimpleItemSchema_Page) MergeDataPageSimpleItemSchemaPage1(v DataPageSimpleItemSchemaPage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Page) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Page) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaPages0 returns the union data inside the DataPageSimpleItemSchema_Pages as a DataPageSimpleItemSchemaPages0
func (t DataPageSimpleItemSchema_Pages) AsDataPageSimpleItemSchemaPages0() (DataPageSimpleItemSchemaPages0, error) {
	var body DataPageSimpleItemSchemaPages0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPages0 overwrites any union data inside the DataPageSimpleItemSchema_Pages as the provided DataPageSimpleItemSchemaPages0
func (t *DataPageSimpleItemSchema_Pages) FromDataPageSimpleItemSchemaPages0(v DataPageSimpleItemSchemaPages0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPages0 performs a merge with any union data inside the DataPageSimpleItemSchema_Pages, using the provided DataPageSimpleItemSchemaPages0
func (t *DataPageSimpleItemSchema_Pages) MergeDataPageSimpleItemSchemaPages0(v DataPageSimpleItemSchemaPages0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaPages1 returns the union data inside the DataPageSimpleItemSchema_Pages as a DataPageSimpleItemSchemaPages1
func (t DataPageSimpleItemSchema_Pages) AsDataPageSimpleItemSchemaPages1() (DataPageSimpleItemSchemaPages1, error) {
	var body DataPageSimpleItemSchemaPages1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaPages1 overwrites any union data inside the DataPageSimpleItemSchema_Pages as the provided DataPageSimpleItemSchemaPages1
func (t *DataPageSimpleItemSchema_Pages) FromDataPageSimpleItemSchemaPages1(v DataPageSimpleItemSchemaPages1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaPages1 performs a merge with any union data inside the DataPageSimpleItemSchema_Pages, using the provided DataPageSimpleItemSchemaPages1
func (t *DataPageSimpleItemSchema_Pages) MergeDataPageSimpleItemSchemaPages1(v DataPageSimpleItemSchemaPages1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Pages) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Pages) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaSize0 returns the union data inside the DataPageSimpleItemSchema_Size as a DataPageSimpleItemSchemaSize0
func (t DataPageSimpleItemSchema_Size) AsDataPageSimpleItemSchemaSize0() (DataPageSimpleItemSchemaSize0, error) {
	var body DataPageSimpleItemSchemaSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaSize0 overwrites any union data inside the DataPageSimpleItemSchema_Size as the provided DataPageSimpleItemSchemaSize0
func (t *DataPageSimpleItemSchema_Size) FromDataPageSimpleItemSchemaSize0(v DataPageSimpleItemSchemaSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaSize0 performs a merge with any union data inside the DataPageSimpleItemSchema_Size, using the provided DataPageSimpleItemSchemaSize0
func (t *DataPageSimpleItemSchema_Size) MergeDataPageSimpleItemSchemaSize0(v DataPageSimpleItemSchemaSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaSize1 returns the union data inside the DataPageSimpleItemSchema_Size as a DataPageSimpleItemSchemaSize1
func (t DataPageSimpleItemSchema_Size) AsDataPageSimpleItemSchemaSize1() (DataPageSimpleItemSchemaSize1, error) {
	var body DataPageSimpleItemSchemaSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaSize1 overwrites any union data inside the DataPageSimpleItemSchema_Size as the provided DataPageSimpleItemSchemaSize1
func (t *DataPageSimpleItemSchema_Size) FromDataPageSimpleItemSchemaSize1(v DataPageSimpleItemSchemaSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaSize1 performs a merge with any union data inside the DataPageSimpleItemSchema_Size, using the provided DataPageSimpleItemSchemaSize1
func (t *DataPageSimpleItemSchema_Size) MergeDataPageSimpleItemSchemaSize1(v DataPageSimpleItemSchemaSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDataPageSimpleItemSchemaTotal0 returns the union data inside the DataPageSimpleItemSchema_Total as a DataPageSimpleItemSchemaTotal0
func (t DataPageSimpleItemSchema_Total) AsDataPageSimpleItemSchemaTotal0() (DataPageSimpleItemSchemaTotal0, error) {
	var body DataPageSimpleItemSchemaTotal0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaTotal0 overwrites any union data inside the DataPageSimpleItemSchema_Total as the provided DataPageSimpleItemSchemaTotal0
func (t *DataPageSimpleItemSchema_Total) FromDataPageSimpleItemSchemaTotal0(v DataPageSimpleItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaTotal0 performs a merge with any union data inside the DataPageSimpleItemSchema_Total, using the provided DataPageSimpleItemSchemaTotal0
func (t *DataPageSimpleItemSchema_Total) MergeDataPageSimpleItemSchemaTotal0(v DataPageSimpleItemSchemaTotal0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDataPageSimpleItemSchemaTotal1 returns the union data inside the DataPageSimpleItemSchema_Total as a DataPageSimpleItemSchemaTotal1
func (t DataPageSimpleItemSchema_Total) AsDataPageSimpleItemSchemaTotal1() (DataPageSimpleItemSchemaTotal1, error) {
	var body DataPageSimpleItemSchemaTotal1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDataPageSimpleItemSchemaTotal1 overwrites any union data inside the DataPageSimpleItemSchema_Total as the provided DataPageSimpleItemSchemaTotal1
func (t *DataPageSimpleItemSchema_Total) FromDataPageSimpleItemSchemaTotal1(v DataPageSimpleItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDataPageSimpleItemSchemaTotal1 performs a merge with any union data inside the DataPageSimpleItemSchema_Total, using the provided DataPageSimpleItemSchemaTotal1
func (t *DataPageSimpleItemSchema_Total) MergeDataPageSimpleItemSchemaTotal1(v DataPageSimpleItemSchemaTotal1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DataPageSimpleItemSchema_Total) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DataPageSimpleItemSchema_Total) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCraftSchema returns the union data inside the ItemSchema_Craft as a CraftSchema
func (t ItemSchema_Craft) AsCraftSchema() (CraftSchema, error) {
	var body CraftSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCraftSchema overwrites any union data inside the ItemSchema_Craft as the provided CraftSchema
func (t *ItemSchema_Craft) FromCraftSchema(v CraftSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCraftSchema performs a merge with any union data inside the ItemSchema_Craft, using the provided CraftSchema
func (t *ItemSchema_Craft) MergeCraftSchema(v CraftSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsItemSchemaCraft1 returns the union data inside the ItemSchema_Craft as a ItemSchemaCraft1
func (t ItemSchema_Craft) AsItemSchemaCraft1() (ItemSchemaCraft1, error) {
	var body ItemSchemaCraft1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromItemSchemaCraft1 overwrites any union data inside the ItemSchema_Craft as the provided ItemSchemaCraft1
func (t *ItemSchema_Craft) FromItemSchemaCraft1(v ItemSchemaCraft1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeItemSchemaCraft1 performs a merge with any union data inside the ItemSchema_Craft, using the provided ItemSchemaCraft1
func (t *ItemSchema_Craft) MergeItemSchemaCraft1(v ItemSchemaCraft1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ItemSchema_Craft) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ItemSchema_Craft) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMapContentSchema returns the union data inside the MapSchema_Content as a MapContentSchema
func (t MapSchema_Content) AsMapContentSchema() (MapContentSchema, error) {
	var body MapContentSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMapContentSchema overwrites any union data inside the MapSchema_Content as the provided MapContentSchema
func (t *MapSchema_Content) FromMapContentSchema(v MapContentSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMapContentSchema performs a merge with any union data inside the MapSchema_Content, using the provided MapContentSchema
func (t *MapSchema_Content) MergeMapContentSchema(v MapContentSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMapSchemaContent1 returns the union data inside the MapSchema_Content as a MapSchemaContent1
func (t MapSchema_Content) AsMapSchemaContent1() (MapSchemaContent1, error) {
	var body MapSchemaContent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMapSchemaContent1 overwrites any union data inside the MapSchema_Content as the provided MapSchemaContent1
func (t *MapSchema_Content) FromMapSchemaContent1(v MapSchemaContent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMapSchemaContent1 performs a merge with any union data inside the MapSchema_Content, using the provided MapSchemaContent1
func (t *MapSchema_Content) MergeMapSchemaContent1(v MapSchemaContent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MapSchema_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MapSchema_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGEItemSchema returns the union data inside the SingleItemSchema_Ge as a GEItemSchema
func (t SingleItemSchema_Ge) AsGEItemSchema() (GEItemSchema, error) {
	var body GEItemSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGEItemSchema overwrites any union data inside the SingleItemSchema_Ge as the provided GEItemSchema
func (t *SingleItemSchema_Ge) FromGEItemSchema(v GEItemSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGEItemSchema performs a merge with any union data inside the SingleItemSchema_Ge, using the provided GEItemSchema
func (t *SingleItemSchema_Ge) MergeGEItemSchema(v GEItemSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSingleItemSchemaGe1 returns the union data inside the SingleItemSchema_Ge as a SingleItemSchemaGe1
func (t SingleItemSchema_Ge) AsSingleItemSchemaGe1() (SingleItemSchemaGe1, error) {
	var body SingleItemSchemaGe1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSingleItemSchemaGe1 overwrites any union data inside the SingleItemSchema_Ge as the provided SingleItemSchemaGe1
func (t *SingleItemSchema_Ge) FromSingleItemSchemaGe1(v SingleItemSchemaGe1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSingleItemSchemaGe1 performs a merge with any union data inside the SingleItemSchema_Ge, using the provided SingleItemSchemaGe1
func (t *SingleItemSchema_Ge) MergeSingleItemSchemaGe1(v SingleItemSchemaGe1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SingleItemSchema_Ge) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SingleItemSchema_Ge) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetStatusGet request
	GetStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountAccountsCreatePostWithBody request with any body
	CreateAccountAccountsCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccountAccountsCreatePost(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCharactersCharactersGet request
	GetAllCharactersCharactersGet(ctx context.Context, params *GetAllCharactersCharactersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCharacterCharactersCreatePostWithBody request with any body
	CreateCharacterCharactersCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCharacterCharactersCreatePost(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharacterCharactersNameGet request
	GetCharacterCharactersNameGet(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllEventsEventsGet request
	GetAllEventsEventsGet(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllGeItemsGeGet request
	GetAllGeItemsGeGet(ctx context.Context, params *GetAllGeItemsGeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGeItemGeCodeGet request
	GetGeItemGeCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllItemsItemsGet request
	GetAllItemsItemsGet(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItemItemsCodeGet request
	GetItemItemsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMapsMapsGet request
	GetAllMapsMapsGet(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMapMapsXYGet request
	GetMapMapsXYGet(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMonstersMonstersGet request
	GetAllMonstersMonstersGet(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonsterMonstersCodeGet request
	GetMonsterMonstersCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBankGoldsMyBankGoldGet request
	GetBankGoldsMyBankGoldGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBankItemsMyBankItemsGet request
	GetBankItemsMyBankItemsGet(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangePasswordMyChangePasswordPostWithBody request with any body
	ChangePasswordMyChangePasswordPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangePasswordMyChangePasswordPost(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyCharactersMyCharactersGet request
	GetMyCharactersMyCharactersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCharactersLogsMyLogsGet request
	GetAllCharactersLogsMyLogsGet(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionDepositBankMyNameActionBankDepositPostWithBody request with any body
	ActionDepositBankMyNameActionBankDepositPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionDepositBankMyNameActionBankDepositPost(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody request with any body
	ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionDepositBankGoldMyNameActionBankDepositGoldPost(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionWithdrawBankMyNameActionBankWithdrawPostWithBody request with any body
	ActionWithdrawBankMyNameActionBankWithdrawPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionWithdrawBankMyNameActionBankWithdrawPost(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody request with any body
	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionCraftingMyNameActionCraftingPostWithBody request with any body
	ActionCraftingMyNameActionCraftingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionCraftingMyNameActionCraftingPost(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionDeleteItemMyNameActionDeletePostWithBody request with any body
	ActionDeleteItemMyNameActionDeletePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionDeleteItemMyNameActionDeletePost(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionEquipItemMyNameActionEquipPostWithBody request with any body
	ActionEquipItemMyNameActionEquipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionEquipItemMyNameActionEquipPost(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionFightMyNameActionFightPost request
	ActionFightMyNameActionFightPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionGatheringMyNameActionGatheringPost request
	ActionGatheringMyNameActionGatheringPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionGeBuyItemMyNameActionGeBuyPostWithBody request with any body
	ActionGeBuyItemMyNameActionGeBuyPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionGeBuyItemMyNameActionGeBuyPost(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionGeSellItemMyNameActionGeSellPostWithBody request with any body
	ActionGeSellItemMyNameActionGeSellPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionGeSellItemMyNameActionGeSellPost(ctx context.Context, name string, body ActionGeSellItemMyNameActionGeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionMoveMyNameActionMovePostWithBody request with any body
	ActionMoveMyNameActionMovePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionMoveMyNameActionMovePost(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionRecyclingMyNameActionRecyclingPostWithBody request with any body
	ActionRecyclingMyNameActionRecyclingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionRecyclingMyNameActionRecyclingPost(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionCompleteTaskMyNameActionTaskCompletePost request
	ActionCompleteTaskMyNameActionTaskCompletePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionTaskExchangeMyNameActionTaskExchangePost request
	ActionTaskExchangeMyNameActionTaskExchangePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionAcceptNewTaskMyNameActionTaskNewPost request
	ActionAcceptNewTaskMyNameActionTaskNewPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActionUnequipItemMyNameActionUnequipPostWithBody request with any body
	ActionUnequipItemMyNameActionUnequipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActionUnequipItemMyNameActionUnequipPost(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllResourcesResourcesGet request
	GetAllResourcesResourcesGet(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceResourcesCodeGet request
	GetResourceResourcesCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateTokenTokenPost request
	GenerateTokenTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountAccountsCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountAccountsCreatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountAccountsCreatePost(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountAccountsCreatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCharactersCharactersGet(ctx context.Context, params *GetAllCharactersCharactersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCharactersCharactersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCharacterCharactersCreatePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCharacterCharactersCreatePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCharacterCharactersCreatePost(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCharacterCharactersCreatePostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharacterCharactersNameGet(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharacterCharactersNameGetRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllEventsEventsGet(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllEventsEventsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllGeItemsGeGet(ctx context.Context, params *GetAllGeItemsGeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllGeItemsGeGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGeItemGeCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGeItemGeCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllItemsItemsGet(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllItemsItemsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItemItemsCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemItemsCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMapsMapsGet(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMapsMapsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMapMapsXYGet(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMapMapsXYGetRequest(c.Server, x, y)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMonstersMonstersGet(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMonstersMonstersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonsterMonstersCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonsterMonstersCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBankGoldsMyBankGoldGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBankGoldsMyBankGoldGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBankItemsMyBankItemsGet(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBankItemsMyBankItemsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePasswordMyChangePasswordPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordMyChangePasswordPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePasswordMyChangePasswordPost(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordMyChangePasswordPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyCharactersMyCharactersGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyCharactersMyCharactersGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCharactersLogsMyLogsGet(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCharactersLogsMyLogsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankMyNameActionBankDepositPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankMyNameActionBankDepositPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankMyNameActionBankDepositPost(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankMyNameActionBankDepositPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDepositBankGoldMyNameActionBankDepositGoldPost(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankMyNameActionBankWithdrawPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankMyNameActionBankWithdrawPost(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankMyNameActionBankWithdrawPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionCraftingMyNameActionCraftingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionCraftingMyNameActionCraftingPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionCraftingMyNameActionCraftingPost(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionCraftingMyNameActionCraftingPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDeleteItemMyNameActionDeletePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDeleteItemMyNameActionDeletePostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionDeleteItemMyNameActionDeletePost(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionDeleteItemMyNameActionDeletePostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionEquipItemMyNameActionEquipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionEquipItemMyNameActionEquipPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionEquipItemMyNameActionEquipPost(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionEquipItemMyNameActionEquipPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionFightMyNameActionFightPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionFightMyNameActionFightPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGatheringMyNameActionGatheringPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGatheringMyNameActionGatheringPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeBuyItemMyNameActionGeBuyPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeBuyItemMyNameActionGeBuyPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeBuyItemMyNameActionGeBuyPost(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeBuyItemMyNameActionGeBuyPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeSellItemMyNameActionGeSellPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeSellItemMyNameActionGeSellPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionGeSellItemMyNameActionGeSellPost(ctx context.Context, name string, body ActionGeSellItemMyNameActionGeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionGeSellItemMyNameActionGeSellPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionMoveMyNameActionMovePostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionMoveMyNameActionMovePostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionMoveMyNameActionMovePost(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionMoveMyNameActionMovePostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionRecyclingMyNameActionRecyclingPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionRecyclingMyNameActionRecyclingPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionRecyclingMyNameActionRecyclingPost(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionRecyclingMyNameActionRecyclingPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionCompleteTaskMyNameActionTaskCompletePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionCompleteTaskMyNameActionTaskCompletePostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionTaskExchangeMyNameActionTaskExchangePost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionTaskExchangeMyNameActionTaskExchangePostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionAcceptNewTaskMyNameActionTaskNewPost(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionAcceptNewTaskMyNameActionTaskNewPostRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionUnequipItemMyNameActionUnequipPostWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionUnequipItemMyNameActionUnequipPostRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActionUnequipItemMyNameActionUnequipPost(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActionUnequipItemMyNameActionUnequipPostRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllResourcesResourcesGet(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllResourcesResourcesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceResourcesCodeGet(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceResourcesCodeGetRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateTokenTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateTokenTokenPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetStatusGetRequest generates requests for GetStatusGet
func NewGetStatusGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountAccountsCreatePostRequest calls the generic CreateAccountAccountsCreatePost builder with application/json body
func NewCreateAccountAccountsCreatePostRequest(server string, body CreateAccountAccountsCreatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountAccountsCreatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountAccountsCreatePostRequestWithBody generates requests for CreateAccountAccountsCreatePost with any type of body
func NewCreateAccountAccountsCreatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllCharactersCharactersGetRequest generates requests for GetAllCharactersCharactersGet
func NewGetAllCharactersCharactersGetRequest(server string, params *GetAllCharactersCharactersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCharacterCharactersCreatePostRequest calls the generic CreateCharacterCharactersCreatePost builder with application/json body
func NewCreateCharacterCharactersCreatePostRequest(server string, body CreateCharacterCharactersCreatePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCharacterCharactersCreatePostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCharacterCharactersCreatePostRequestWithBody generates requests for CreateCharacterCharactersCreatePost with any type of body
func NewCreateCharacterCharactersCreatePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCharacterCharactersNameGetRequest generates requests for GetCharacterCharactersNameGet
func NewGetCharacterCharactersNameGetRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllEventsEventsGetRequest generates requests for GetAllEventsEventsGet
func NewGetAllEventsEventsGetRequest(server string, params *GetAllEventsEventsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllGeItemsGeGetRequest generates requests for GetAllGeItemsGeGet
func NewGetAllGeItemsGeGetRequest(server string, params *GetAllGeItemsGeGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ge/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGeItemGeCodeGetRequest generates requests for GetGeItemGeCodeGet
func NewGetGeItemGeCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ge/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllItemsItemsGetRequest generates requests for GetAllItemsItemsGet
func NewGetAllItemsItemsGetRequest(server string, params *GetAllItemsItemsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CraftSkill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "craft_skill", runtime.ParamLocationQuery, *params.CraftSkill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CraftMaterial != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "craft_material", runtime.ParamLocationQuery, *params.CraftMaterial); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetItemItemsCodeGetRequest generates requests for GetItemItemsCodeGet
func NewGetItemItemsCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMapsMapsGetRequest generates requests for GetAllMapsMapsGet
func NewGetAllMapsMapsGetRequest(server string, params *GetAllMapsMapsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maps/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content_type", runtime.ParamLocationQuery, *params.ContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content_code", runtime.ParamLocationQuery, *params.ContentCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMapMapsXYGetRequest generates requests for GetMapMapsXYGet
func NewGetMapMapsXYGetRequest(server string, x int, y int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "x", runtime.ParamLocationPath, x)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "y", runtime.ParamLocationPath, y)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/maps/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMonstersMonstersGetRequest generates requests for GetAllMonstersMonstersGet
func NewGetAllMonstersMonstersGetRequest(server string, params *GetAllMonstersMonstersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monsters/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Drop != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drop", runtime.ParamLocationQuery, *params.Drop); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMonsterMonstersCodeGetRequest generates requests for GetMonsterMonstersCodeGet
func NewGetMonsterMonstersCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monsters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBankGoldsMyBankGoldGetRequest generates requests for GetBankGoldsMyBankGoldGet
func NewGetBankGoldsMyBankGoldGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/bank/gold")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBankItemsMyBankItemsGetRequest generates requests for GetBankItemsMyBankItemsGet
func NewGetBankItemsMyBankItemsGetRequest(server string, params *GetBankItemsMyBankItemsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/bank/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ItemCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "item_code", runtime.ParamLocationQuery, *params.ItemCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangePasswordMyChangePasswordPostRequest calls the generic ChangePasswordMyChangePasswordPost builder with application/json body
func NewChangePasswordMyChangePasswordPostRequest(server string, body ChangePasswordMyChangePasswordPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangePasswordMyChangePasswordPostRequestWithBody(server, "application/json", bodyReader)
}

// NewChangePasswordMyChangePasswordPostRequestWithBody generates requests for ChangePasswordMyChangePasswordPost with any type of body
func NewChangePasswordMyChangePasswordPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/change_password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMyCharactersMyCharactersGetRequest generates requests for GetMyCharactersMyCharactersGet
func NewGetMyCharactersMyCharactersGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/characters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllCharactersLogsMyLogsGetRequest generates requests for GetAllCharactersLogsMyLogsGet
func NewGetAllCharactersLogsMyLogsGetRequest(server string, params *GetAllCharactersLogsMyLogsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionDepositBankMyNameActionBankDepositPostRequest calls the generic ActionDepositBankMyNameActionBankDepositPost builder with application/json body
func NewActionDepositBankMyNameActionBankDepositPostRequest(server string, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionDepositBankMyNameActionBankDepositPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionDepositBankMyNameActionBankDepositPostRequestWithBody generates requests for ActionDepositBankMyNameActionBankDepositPost with any type of body
func NewActionDepositBankMyNameActionBankDepositPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/deposit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequest calls the generic ActionDepositBankGoldMyNameActionBankDepositGoldPost builder with application/json body
func NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequest(server string, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody generates requests for ActionDepositBankGoldMyNameActionBankDepositGoldPost with any type of body
func NewActionDepositBankGoldMyNameActionBankDepositGoldPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/deposit/gold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionWithdrawBankMyNameActionBankWithdrawPostRequest calls the generic ActionWithdrawBankMyNameActionBankWithdrawPost builder with application/json body
func NewActionWithdrawBankMyNameActionBankWithdrawPostRequest(server string, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody generates requests for ActionWithdrawBankMyNameActionBankWithdrawPost with any type of body
func NewActionWithdrawBankMyNameActionBankWithdrawPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/withdraw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequest calls the generic ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost builder with application/json body
func NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequest(server string, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody generates requests for ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost with any type of body
func NewActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/bank/withdraw/gold", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionCraftingMyNameActionCraftingPostRequest calls the generic ActionCraftingMyNameActionCraftingPost builder with application/json body
func NewActionCraftingMyNameActionCraftingPostRequest(server string, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionCraftingMyNameActionCraftingPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionCraftingMyNameActionCraftingPostRequestWithBody generates requests for ActionCraftingMyNameActionCraftingPost with any type of body
func NewActionCraftingMyNameActionCraftingPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/crafting", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionDeleteItemMyNameActionDeletePostRequest calls the generic ActionDeleteItemMyNameActionDeletePost builder with application/json body
func NewActionDeleteItemMyNameActionDeletePostRequest(server string, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionDeleteItemMyNameActionDeletePostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionDeleteItemMyNameActionDeletePostRequestWithBody generates requests for ActionDeleteItemMyNameActionDeletePost with any type of body
func NewActionDeleteItemMyNameActionDeletePostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionEquipItemMyNameActionEquipPostRequest calls the generic ActionEquipItemMyNameActionEquipPost builder with application/json body
func NewActionEquipItemMyNameActionEquipPostRequest(server string, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionEquipItemMyNameActionEquipPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionEquipItemMyNameActionEquipPostRequestWithBody generates requests for ActionEquipItemMyNameActionEquipPost with any type of body
func NewActionEquipItemMyNameActionEquipPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/equip", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionFightMyNameActionFightPostRequest generates requests for ActionFightMyNameActionFightPost
func NewActionFightMyNameActionFightPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/fight", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionGatheringMyNameActionGatheringPostRequest generates requests for ActionGatheringMyNameActionGatheringPost
func NewActionGatheringMyNameActionGatheringPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/gathering", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionGeBuyItemMyNameActionGeBuyPostRequest calls the generic ActionGeBuyItemMyNameActionGeBuyPost builder with application/json body
func NewActionGeBuyItemMyNameActionGeBuyPostRequest(server string, name string, body ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionGeBuyItemMyNameActionGeBuyPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionGeBuyItemMyNameActionGeBuyPostRequestWithBody generates requests for ActionGeBuyItemMyNameActionGeBuyPost with any type of body
func NewActionGeBuyItemMyNameActionGeBuyPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/ge/buy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionGeSellItemMyNameActionGeSellPostRequest calls the generic ActionGeSellItemMyNameActionGeSellPost builder with application/json body
func NewActionGeSellItemMyNameActionGeSellPostRequest(server string, name string, body ActionGeSellItemMyNameActionGeSellPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionGeSellItemMyNameActionGeSellPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionGeSellItemMyNameActionGeSellPostRequestWithBody generates requests for ActionGeSellItemMyNameActionGeSellPost with any type of body
func NewActionGeSellItemMyNameActionGeSellPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/ge/sell", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionMoveMyNameActionMovePostRequest calls the generic ActionMoveMyNameActionMovePost builder with application/json body
func NewActionMoveMyNameActionMovePostRequest(server string, name string, body ActionMoveMyNameActionMovePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionMoveMyNameActionMovePostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionMoveMyNameActionMovePostRequestWithBody generates requests for ActionMoveMyNameActionMovePost with any type of body
func NewActionMoveMyNameActionMovePostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/move", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionRecyclingMyNameActionRecyclingPostRequest calls the generic ActionRecyclingMyNameActionRecyclingPost builder with application/json body
func NewActionRecyclingMyNameActionRecyclingPostRequest(server string, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionRecyclingMyNameActionRecyclingPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionRecyclingMyNameActionRecyclingPostRequestWithBody generates requests for ActionRecyclingMyNameActionRecyclingPost with any type of body
func NewActionRecyclingMyNameActionRecyclingPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/recycling", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActionCompleteTaskMyNameActionTaskCompletePostRequest generates requests for ActionCompleteTaskMyNameActionTaskCompletePost
func NewActionCompleteTaskMyNameActionTaskCompletePostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/complete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionTaskExchangeMyNameActionTaskExchangePostRequest generates requests for ActionTaskExchangeMyNameActionTaskExchangePost
func NewActionTaskExchangeMyNameActionTaskExchangePostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/exchange", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionAcceptNewTaskMyNameActionTaskNewPostRequest generates requests for ActionAcceptNewTaskMyNameActionTaskNewPost
func NewActionAcceptNewTaskMyNameActionTaskNewPostRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/task/new", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActionUnequipItemMyNameActionUnequipPostRequest calls the generic ActionUnequipItemMyNameActionUnequipPost builder with application/json body
func NewActionUnequipItemMyNameActionUnequipPostRequest(server string, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActionUnequipItemMyNameActionUnequipPostRequestWithBody(server, name, "application/json", bodyReader)
}

// NewActionUnequipItemMyNameActionUnequipPostRequestWithBody generates requests for ActionUnequipItemMyNameActionUnequipPost with any type of body
func NewActionUnequipItemMyNameActionUnequipPostRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/my/%s/action/unequip", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllResourcesResourcesGetRequest generates requests for GetAllResourcesResourcesGet
func NewGetAllResourcesResourcesGetRequest(server string, params *GetAllResourcesResourcesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_level", runtime.ParamLocationQuery, *params.MinLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxLevel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_level", runtime.ParamLocationQuery, *params.MaxLevel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skill != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skill", runtime.ParamLocationQuery, *params.Skill); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Drop != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drop", runtime.ParamLocationQuery, *params.Drop); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceResourcesCodeGetRequest generates requests for GetResourceResourcesCodeGet
func NewGetResourceResourcesCodeGetRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGenerateTokenTokenPostRequest generates requests for GenerateTokenTokenPost
func NewGenerateTokenTokenPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetStatusGetWithResponse request
	GetStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusGetResponse, error)

	// CreateAccountAccountsCreatePostWithBodyWithResponse request with any body
	CreateAccountAccountsCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error)

	CreateAccountAccountsCreatePostWithResponse(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error)

	// GetAllCharactersCharactersGetWithResponse request
	GetAllCharactersCharactersGetWithResponse(ctx context.Context, params *GetAllCharactersCharactersGetParams, reqEditors ...RequestEditorFn) (*GetAllCharactersCharactersGetResponse, error)

	// CreateCharacterCharactersCreatePostWithBodyWithResponse request with any body
	CreateCharacterCharactersCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error)

	CreateCharacterCharactersCreatePostWithResponse(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error)

	// GetCharacterCharactersNameGetWithResponse request
	GetCharacterCharactersNameGetWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCharacterCharactersNameGetResponse, error)

	// GetAllEventsEventsGetWithResponse request
	GetAllEventsEventsGetWithResponse(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*GetAllEventsEventsGetResponse, error)

	// GetAllGeItemsGeGetWithResponse request
	GetAllGeItemsGeGetWithResponse(ctx context.Context, params *GetAllGeItemsGeGetParams, reqEditors ...RequestEditorFn) (*GetAllGeItemsGeGetResponse, error)

	// GetGeItemGeCodeGetWithResponse request
	GetGeItemGeCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetGeItemGeCodeGetResponse, error)

	// GetAllItemsItemsGetWithResponse request
	GetAllItemsItemsGetWithResponse(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*GetAllItemsItemsGetResponse, error)

	// GetItemItemsCodeGetWithResponse request
	GetItemItemsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetItemItemsCodeGetResponse, error)

	// GetAllMapsMapsGetWithResponse request
	GetAllMapsMapsGetWithResponse(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*GetAllMapsMapsGetResponse, error)

	// GetMapMapsXYGetWithResponse request
	GetMapMapsXYGetWithResponse(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*GetMapMapsXYGetResponse, error)

	// GetAllMonstersMonstersGetWithResponse request
	GetAllMonstersMonstersGetWithResponse(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*GetAllMonstersMonstersGetResponse, error)

	// GetMonsterMonstersCodeGetWithResponse request
	GetMonsterMonstersCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetMonsterMonstersCodeGetResponse, error)

	// GetBankGoldsMyBankGoldGetWithResponse request
	GetBankGoldsMyBankGoldGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBankGoldsMyBankGoldGetResponse, error)

	// GetBankItemsMyBankItemsGetWithResponse request
	GetBankItemsMyBankItemsGetWithResponse(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*GetBankItemsMyBankItemsGetResponse, error)

	// ChangePasswordMyChangePasswordPostWithBodyWithResponse request with any body
	ChangePasswordMyChangePasswordPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error)

	ChangePasswordMyChangePasswordPostWithResponse(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error)

	// GetMyCharactersMyCharactersGetWithResponse request
	GetMyCharactersMyCharactersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyCharactersMyCharactersGetResponse, error)

	// GetAllCharactersLogsMyLogsGetWithResponse request
	GetAllCharactersLogsMyLogsGetWithResponse(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*GetAllCharactersLogsMyLogsGetResponse, error)

	// ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse request with any body
	ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error)

	ActionDepositBankMyNameActionBankDepositPostWithResponse(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error)

	// ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse request with any body
	ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error)

	ActionDepositBankGoldMyNameActionBankDepositGoldPostWithResponse(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error)

	// ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse request with any body
	ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error)

	ActionWithdrawBankMyNameActionBankWithdrawPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error)

	// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse request with any body
	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error)

	ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error)

	// ActionCraftingMyNameActionCraftingPostWithBodyWithResponse request with any body
	ActionCraftingMyNameActionCraftingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error)

	ActionCraftingMyNameActionCraftingPostWithResponse(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error)

	// ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse request with any body
	ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error)

	ActionDeleteItemMyNameActionDeletePostWithResponse(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error)

	// ActionEquipItemMyNameActionEquipPostWithBodyWithResponse request with any body
	ActionEquipItemMyNameActionEquipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error)

	ActionEquipItemMyNameActionEquipPostWithResponse(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error)

	// ActionFightMyNameActionFightPostWithResponse request
	ActionFightMyNameActionFightPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionFightMyNameActionFightPostResponse, error)

	// ActionGatheringMyNameActionGatheringPostWithResponse request
	ActionGatheringMyNameActionGatheringPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionGatheringMyNameActionGatheringPostResponse, error)

	// ActionGeBuyItemMyNameActionGeBuyPostWithBodyWithResponse request with any body
	ActionGeBuyItemMyNameActionGeBuyPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGeBuyPostResponse, error)

	ActionGeBuyItemMyNameActionGeBuyPostWithResponse(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGeBuyPostResponse, error)

	// ActionGeSellItemMyNameActionGeSellPostWithBodyWithResponse request with any body
	ActionGeSellItemMyNameActionGeSellPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeSellItemMyNameActionGeSellPostResponse, error)

	ActionGeSellItemMyNameActionGeSellPostWithResponse(ctx context.Context, name string, body ActionGeSellItemMyNameActionGeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeSellItemMyNameActionGeSellPostResponse, error)

	// ActionMoveMyNameActionMovePostWithBodyWithResponse request with any body
	ActionMoveMyNameActionMovePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error)

	ActionMoveMyNameActionMovePostWithResponse(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error)

	// ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse request with any body
	ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error)

	ActionRecyclingMyNameActionRecyclingPostWithResponse(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error)

	// ActionCompleteTaskMyNameActionTaskCompletePostWithResponse request
	ActionCompleteTaskMyNameActionTaskCompletePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionCompleteTaskMyNameActionTaskCompletePostResponse, error)

	// ActionTaskExchangeMyNameActionTaskExchangePostWithResponse request
	ActionTaskExchangeMyNameActionTaskExchangePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionTaskExchangeMyNameActionTaskExchangePostResponse, error)

	// ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse request
	ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionAcceptNewTaskMyNameActionTaskNewPostResponse, error)

	// ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse request with any body
	ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error)

	ActionUnequipItemMyNameActionUnequipPostWithResponse(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error)

	// GetAllResourcesResourcesGetWithResponse request
	GetAllResourcesResourcesGetWithResponse(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*GetAllResourcesResourcesGetResponse, error)

	// GetResourceResourcesCodeGetWithResponse request
	GetResourceResourcesCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetResourceResourcesCodeGetResponse, error)

	// GenerateTokenTokenPostWithResponse request
	GenerateTokenTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateTokenTokenPostResponse, error)
}

type GetStatusGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetStatusGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountAccountsCreatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSchema
}

// Status returns HTTPResponse.Status
func (r CreateAccountAccountsCreatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountAccountsCreatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCharactersCharactersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageCharacterSchema
}

// Status returns HTTPResponse.Status
func (r GetAllCharactersCharactersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCharactersCharactersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCharacterCharactersCreatePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterResponseSchema
}

// Status returns HTTPResponse.Status
func (r CreateCharacterCharactersCreatePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCharacterCharactersCreatePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharacterCharactersNameGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetCharacterCharactersNameGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharacterCharactersNameGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllEventsEventsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageActiveEventSchema
}

// Status returns HTTPResponse.Status
func (r GetAllEventsEventsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllEventsEventsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllGeItemsGeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageGEItemSchema
}

// Status returns HTTPResponse.Status
func (r GetAllGeItemsGeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllGeItemsGeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGeItemGeCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GEItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetGeItemGeCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGeItemGeCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllItemsItemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageItemSchema
}

// Status returns HTTPResponse.Status
func (r GetAllItemsItemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllItemsItemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemItemsCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetItemItemsCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemItemsCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMapsMapsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageMapSchema
}

// Status returns HTTPResponse.Status
func (r GetAllMapsMapsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMapsMapsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMapMapsXYGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MapResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetMapMapsXYGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMapMapsXYGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMonstersMonstersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageMonsterSchema
}

// Status returns HTTPResponse.Status
func (r GetAllMonstersMonstersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMonstersMonstersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonsterMonstersCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonsterResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetMonsterMonstersCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonsterMonstersCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBankGoldsMyBankGoldGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoldBankResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetBankGoldsMyBankGoldGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBankGoldsMyBankGoldGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBankItemsMyBankItemsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageSimpleItemSchema
}

// Status returns HTTPResponse.Status
func (r GetBankItemsMyBankItemsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBankItemsMyBankItemsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangePasswordMyChangePasswordPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseSchema
}

// Status returns HTTPResponse.Status
func (r ChangePasswordMyChangePasswordPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePasswordMyChangePasswordPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyCharactersMyCharactersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyCharactersListSchema
}

// Status returns HTTPResponse.Status
func (r GetMyCharactersMyCharactersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyCharactersMyCharactersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCharactersLogsMyLogsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageLogSchema
}

// Status returns HTTPResponse.Status
func (r GetAllCharactersLogsMyLogsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCharactersLogsMyLogsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionDepositBankMyNameActionBankDepositPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionItemBankResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionDepositBankMyNameActionBankDepositPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionDepositBankMyNameActionBankDepositPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoldResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionWithdrawBankMyNameActionBankWithdrawPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionItemBankResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionWithdrawBankMyNameActionBankWithdrawPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionWithdrawBankMyNameActionBankWithdrawPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GoldResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionCraftingMyNameActionCraftingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SkillResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionCraftingMyNameActionCraftingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionCraftingMyNameActionCraftingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionDeleteItemMyNameActionDeletePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteItemResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionDeleteItemMyNameActionDeletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionDeleteItemMyNameActionDeletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionEquipItemMyNameActionEquipPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EquipmentResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionEquipItemMyNameActionEquipPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionEquipItemMyNameActionEquipPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionFightMyNameActionFightPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterFightResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionFightMyNameActionFightPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionFightMyNameActionFightPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionGatheringMyNameActionGatheringPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SkillResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionGatheringMyNameActionGatheringPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionGatheringMyNameActionGatheringPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionGeBuyItemMyNameActionGeBuyPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GETransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionGeBuyItemMyNameActionGeBuyPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionGeBuyItemMyNameActionGeBuyPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionGeSellItemMyNameActionGeSellPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GETransactionResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionGeSellItemMyNameActionGeSellPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionGeSellItemMyNameActionGeSellPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionMoveMyNameActionMovePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CharacterMovementResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionMoveMyNameActionMovePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionMoveMyNameActionMovePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionRecyclingMyNameActionRecyclingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecyclingResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionRecyclingMyNameActionRecyclingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionRecyclingMyNameActionRecyclingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionCompleteTaskMyNameActionTaskCompletePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskRewardResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionCompleteTaskMyNameActionTaskCompletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionCompleteTaskMyNameActionTaskCompletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionTaskExchangeMyNameActionTaskExchangePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskRewardResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionTaskExchangeMyNameActionTaskExchangePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionTaskExchangeMyNameActionTaskExchangePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionAcceptNewTaskMyNameActionTaskNewPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaskResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionAcceptNewTaskMyNameActionTaskNewPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionAcceptNewTaskMyNameActionTaskNewPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActionUnequipItemMyNameActionUnequipPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EquipmentResponseSchema
}

// Status returns HTTPResponse.Status
func (r ActionUnequipItemMyNameActionUnequipPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActionUnequipItemMyNameActionUnequipPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllResourcesResourcesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataPageResourceSchema
}

// Status returns HTTPResponse.Status
func (r GetAllResourcesResourcesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllResourcesResourcesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceResourcesCodeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceResponseSchema
}

// Status returns HTTPResponse.Status
func (r GetResourceResourcesCodeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceResourcesCodeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateTokenTokenPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenResponseSchema
}

// Status returns HTTPResponse.Status
func (r GenerateTokenTokenPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateTokenTokenPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetStatusGetWithResponse request returning *GetStatusGetResponse
func (c *ClientWithResponses) GetStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusGetResponse, error) {
	rsp, err := c.GetStatusGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusGetResponse(rsp)
}

// CreateAccountAccountsCreatePostWithBodyWithResponse request with arbitrary body returning *CreateAccountAccountsCreatePostResponse
func (c *ClientWithResponses) CreateAccountAccountsCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error) {
	rsp, err := c.CreateAccountAccountsCreatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountAccountsCreatePostResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountAccountsCreatePostWithResponse(ctx context.Context, body CreateAccountAccountsCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountAccountsCreatePostResponse, error) {
	rsp, err := c.CreateAccountAccountsCreatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountAccountsCreatePostResponse(rsp)
}

// GetAllCharactersCharactersGetWithResponse request returning *GetAllCharactersCharactersGetResponse
func (c *ClientWithResponses) GetAllCharactersCharactersGetWithResponse(ctx context.Context, params *GetAllCharactersCharactersGetParams, reqEditors ...RequestEditorFn) (*GetAllCharactersCharactersGetResponse, error) {
	rsp, err := c.GetAllCharactersCharactersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCharactersCharactersGetResponse(rsp)
}

// CreateCharacterCharactersCreatePostWithBodyWithResponse request with arbitrary body returning *CreateCharacterCharactersCreatePostResponse
func (c *ClientWithResponses) CreateCharacterCharactersCreatePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error) {
	rsp, err := c.CreateCharacterCharactersCreatePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCharacterCharactersCreatePostResponse(rsp)
}

func (c *ClientWithResponses) CreateCharacterCharactersCreatePostWithResponse(ctx context.Context, body CreateCharacterCharactersCreatePostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCharacterCharactersCreatePostResponse, error) {
	rsp, err := c.CreateCharacterCharactersCreatePost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCharacterCharactersCreatePostResponse(rsp)
}

// GetCharacterCharactersNameGetWithResponse request returning *GetCharacterCharactersNameGetResponse
func (c *ClientWithResponses) GetCharacterCharactersNameGetWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetCharacterCharactersNameGetResponse, error) {
	rsp, err := c.GetCharacterCharactersNameGet(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharacterCharactersNameGetResponse(rsp)
}

// GetAllEventsEventsGetWithResponse request returning *GetAllEventsEventsGetResponse
func (c *ClientWithResponses) GetAllEventsEventsGetWithResponse(ctx context.Context, params *GetAllEventsEventsGetParams, reqEditors ...RequestEditorFn) (*GetAllEventsEventsGetResponse, error) {
	rsp, err := c.GetAllEventsEventsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllEventsEventsGetResponse(rsp)
}

// GetAllGeItemsGeGetWithResponse request returning *GetAllGeItemsGeGetResponse
func (c *ClientWithResponses) GetAllGeItemsGeGetWithResponse(ctx context.Context, params *GetAllGeItemsGeGetParams, reqEditors ...RequestEditorFn) (*GetAllGeItemsGeGetResponse, error) {
	rsp, err := c.GetAllGeItemsGeGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllGeItemsGeGetResponse(rsp)
}

// GetGeItemGeCodeGetWithResponse request returning *GetGeItemGeCodeGetResponse
func (c *ClientWithResponses) GetGeItemGeCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetGeItemGeCodeGetResponse, error) {
	rsp, err := c.GetGeItemGeCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGeItemGeCodeGetResponse(rsp)
}

// GetAllItemsItemsGetWithResponse request returning *GetAllItemsItemsGetResponse
func (c *ClientWithResponses) GetAllItemsItemsGetWithResponse(ctx context.Context, params *GetAllItemsItemsGetParams, reqEditors ...RequestEditorFn) (*GetAllItemsItemsGetResponse, error) {
	rsp, err := c.GetAllItemsItemsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllItemsItemsGetResponse(rsp)
}

// GetItemItemsCodeGetWithResponse request returning *GetItemItemsCodeGetResponse
func (c *ClientWithResponses) GetItemItemsCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetItemItemsCodeGetResponse, error) {
	rsp, err := c.GetItemItemsCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemItemsCodeGetResponse(rsp)
}

// GetAllMapsMapsGetWithResponse request returning *GetAllMapsMapsGetResponse
func (c *ClientWithResponses) GetAllMapsMapsGetWithResponse(ctx context.Context, params *GetAllMapsMapsGetParams, reqEditors ...RequestEditorFn) (*GetAllMapsMapsGetResponse, error) {
	rsp, err := c.GetAllMapsMapsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMapsMapsGetResponse(rsp)
}

// GetMapMapsXYGetWithResponse request returning *GetMapMapsXYGetResponse
func (c *ClientWithResponses) GetMapMapsXYGetWithResponse(ctx context.Context, x int, y int, reqEditors ...RequestEditorFn) (*GetMapMapsXYGetResponse, error) {
	rsp, err := c.GetMapMapsXYGet(ctx, x, y, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMapMapsXYGetResponse(rsp)
}

// GetAllMonstersMonstersGetWithResponse request returning *GetAllMonstersMonstersGetResponse
func (c *ClientWithResponses) GetAllMonstersMonstersGetWithResponse(ctx context.Context, params *GetAllMonstersMonstersGetParams, reqEditors ...RequestEditorFn) (*GetAllMonstersMonstersGetResponse, error) {
	rsp, err := c.GetAllMonstersMonstersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMonstersMonstersGetResponse(rsp)
}

// GetMonsterMonstersCodeGetWithResponse request returning *GetMonsterMonstersCodeGetResponse
func (c *ClientWithResponses) GetMonsterMonstersCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetMonsterMonstersCodeGetResponse, error) {
	rsp, err := c.GetMonsterMonstersCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonsterMonstersCodeGetResponse(rsp)
}

// GetBankGoldsMyBankGoldGetWithResponse request returning *GetBankGoldsMyBankGoldGetResponse
func (c *ClientWithResponses) GetBankGoldsMyBankGoldGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBankGoldsMyBankGoldGetResponse, error) {
	rsp, err := c.GetBankGoldsMyBankGoldGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBankGoldsMyBankGoldGetResponse(rsp)
}

// GetBankItemsMyBankItemsGetWithResponse request returning *GetBankItemsMyBankItemsGetResponse
func (c *ClientWithResponses) GetBankItemsMyBankItemsGetWithResponse(ctx context.Context, params *GetBankItemsMyBankItemsGetParams, reqEditors ...RequestEditorFn) (*GetBankItemsMyBankItemsGetResponse, error) {
	rsp, err := c.GetBankItemsMyBankItemsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBankItemsMyBankItemsGetResponse(rsp)
}

// ChangePasswordMyChangePasswordPostWithBodyWithResponse request with arbitrary body returning *ChangePasswordMyChangePasswordPostResponse
func (c *ClientWithResponses) ChangePasswordMyChangePasswordPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error) {
	rsp, err := c.ChangePasswordMyChangePasswordPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordMyChangePasswordPostResponse(rsp)
}

func (c *ClientWithResponses) ChangePasswordMyChangePasswordPostWithResponse(ctx context.Context, body ChangePasswordMyChangePasswordPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordMyChangePasswordPostResponse, error) {
	rsp, err := c.ChangePasswordMyChangePasswordPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordMyChangePasswordPostResponse(rsp)
}

// GetMyCharactersMyCharactersGetWithResponse request returning *GetMyCharactersMyCharactersGetResponse
func (c *ClientWithResponses) GetMyCharactersMyCharactersGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyCharactersMyCharactersGetResponse, error) {
	rsp, err := c.GetMyCharactersMyCharactersGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyCharactersMyCharactersGetResponse(rsp)
}

// GetAllCharactersLogsMyLogsGetWithResponse request returning *GetAllCharactersLogsMyLogsGetResponse
func (c *ClientWithResponses) GetAllCharactersLogsMyLogsGetWithResponse(ctx context.Context, params *GetAllCharactersLogsMyLogsGetParams, reqEditors ...RequestEditorFn) (*GetAllCharactersLogsMyLogsGetResponse, error) {
	rsp, err := c.GetAllCharactersLogsMyLogsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCharactersLogsMyLogsGetResponse(rsp)
}

// ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse request with arbitrary body returning *ActionDepositBankMyNameActionBankDepositPostResponse
func (c *ClientWithResponses) ActionDepositBankMyNameActionBankDepositPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error) {
	rsp, err := c.ActionDepositBankMyNameActionBankDepositPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankMyNameActionBankDepositPostResponse(rsp)
}

func (c *ClientWithResponses) ActionDepositBankMyNameActionBankDepositPostWithResponse(ctx context.Context, name string, body ActionDepositBankMyNameActionBankDepositPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankMyNameActionBankDepositPostResponse, error) {
	rsp, err := c.ActionDepositBankMyNameActionBankDepositPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankMyNameActionBankDepositPostResponse(rsp)
}

// ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse request with arbitrary body returning *ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse
func (c *ClientWithResponses) ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error) {
	rsp, err := c.ActionDepositBankGoldMyNameActionBankDepositGoldPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(rsp)
}

func (c *ClientWithResponses) ActionDepositBankGoldMyNameActionBankDepositGoldPostWithResponse(ctx context.Context, name string, body ActionDepositBankGoldMyNameActionBankDepositGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error) {
	rsp, err := c.ActionDepositBankGoldMyNameActionBankDepositGoldPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(rsp)
}

// ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse request with arbitrary body returning *ActionWithdrawBankMyNameActionBankWithdrawPostResponse
func (c *ClientWithResponses) ActionWithdrawBankMyNameActionBankWithdrawPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error) {
	rsp, err := c.ActionWithdrawBankMyNameActionBankWithdrawPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse(rsp)
}

func (c *ClientWithResponses) ActionWithdrawBankMyNameActionBankWithdrawPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankMyNameActionBankWithdrawPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error) {
	rsp, err := c.ActionWithdrawBankMyNameActionBankWithdrawPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse(rsp)
}

// ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse request with arbitrary body returning *ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse
func (c *ClientWithResponses) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error) {
	rsp, err := c.ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(rsp)
}

func (c *ClientWithResponses) ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithResponse(ctx context.Context, name string, body ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error) {
	rsp, err := c.ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(rsp)
}

// ActionCraftingMyNameActionCraftingPostWithBodyWithResponse request with arbitrary body returning *ActionCraftingMyNameActionCraftingPostResponse
func (c *ClientWithResponses) ActionCraftingMyNameActionCraftingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error) {
	rsp, err := c.ActionCraftingMyNameActionCraftingPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionCraftingMyNameActionCraftingPostResponse(rsp)
}

func (c *ClientWithResponses) ActionCraftingMyNameActionCraftingPostWithResponse(ctx context.Context, name string, body ActionCraftingMyNameActionCraftingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionCraftingMyNameActionCraftingPostResponse, error) {
	rsp, err := c.ActionCraftingMyNameActionCraftingPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionCraftingMyNameActionCraftingPostResponse(rsp)
}

// ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse request with arbitrary body returning *ActionDeleteItemMyNameActionDeletePostResponse
func (c *ClientWithResponses) ActionDeleteItemMyNameActionDeletePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error) {
	rsp, err := c.ActionDeleteItemMyNameActionDeletePostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDeleteItemMyNameActionDeletePostResponse(rsp)
}

func (c *ClientWithResponses) ActionDeleteItemMyNameActionDeletePostWithResponse(ctx context.Context, name string, body ActionDeleteItemMyNameActionDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionDeleteItemMyNameActionDeletePostResponse, error) {
	rsp, err := c.ActionDeleteItemMyNameActionDeletePost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionDeleteItemMyNameActionDeletePostResponse(rsp)
}

// ActionEquipItemMyNameActionEquipPostWithBodyWithResponse request with arbitrary body returning *ActionEquipItemMyNameActionEquipPostResponse
func (c *ClientWithResponses) ActionEquipItemMyNameActionEquipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error) {
	rsp, err := c.ActionEquipItemMyNameActionEquipPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionEquipItemMyNameActionEquipPostResponse(rsp)
}

func (c *ClientWithResponses) ActionEquipItemMyNameActionEquipPostWithResponse(ctx context.Context, name string, body ActionEquipItemMyNameActionEquipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionEquipItemMyNameActionEquipPostResponse, error) {
	rsp, err := c.ActionEquipItemMyNameActionEquipPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionEquipItemMyNameActionEquipPostResponse(rsp)
}

// ActionFightMyNameActionFightPostWithResponse request returning *ActionFightMyNameActionFightPostResponse
func (c *ClientWithResponses) ActionFightMyNameActionFightPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionFightMyNameActionFightPostResponse, error) {
	rsp, err := c.ActionFightMyNameActionFightPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionFightMyNameActionFightPostResponse(rsp)
}

// ActionGatheringMyNameActionGatheringPostWithResponse request returning *ActionGatheringMyNameActionGatheringPostResponse
func (c *ClientWithResponses) ActionGatheringMyNameActionGatheringPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionGatheringMyNameActionGatheringPostResponse, error) {
	rsp, err := c.ActionGatheringMyNameActionGatheringPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGatheringMyNameActionGatheringPostResponse(rsp)
}

// ActionGeBuyItemMyNameActionGeBuyPostWithBodyWithResponse request with arbitrary body returning *ActionGeBuyItemMyNameActionGeBuyPostResponse
func (c *ClientWithResponses) ActionGeBuyItemMyNameActionGeBuyPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGeBuyPostResponse, error) {
	rsp, err := c.ActionGeBuyItemMyNameActionGeBuyPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeBuyItemMyNameActionGeBuyPostResponse(rsp)
}

func (c *ClientWithResponses) ActionGeBuyItemMyNameActionGeBuyPostWithResponse(ctx context.Context, name string, body ActionGeBuyItemMyNameActionGeBuyPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeBuyItemMyNameActionGeBuyPostResponse, error) {
	rsp, err := c.ActionGeBuyItemMyNameActionGeBuyPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeBuyItemMyNameActionGeBuyPostResponse(rsp)
}

// ActionGeSellItemMyNameActionGeSellPostWithBodyWithResponse request with arbitrary body returning *ActionGeSellItemMyNameActionGeSellPostResponse
func (c *ClientWithResponses) ActionGeSellItemMyNameActionGeSellPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionGeSellItemMyNameActionGeSellPostResponse, error) {
	rsp, err := c.ActionGeSellItemMyNameActionGeSellPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeSellItemMyNameActionGeSellPostResponse(rsp)
}

func (c *ClientWithResponses) ActionGeSellItemMyNameActionGeSellPostWithResponse(ctx context.Context, name string, body ActionGeSellItemMyNameActionGeSellPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionGeSellItemMyNameActionGeSellPostResponse, error) {
	rsp, err := c.ActionGeSellItemMyNameActionGeSellPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionGeSellItemMyNameActionGeSellPostResponse(rsp)
}

// ActionMoveMyNameActionMovePostWithBodyWithResponse request with arbitrary body returning *ActionMoveMyNameActionMovePostResponse
func (c *ClientWithResponses) ActionMoveMyNameActionMovePostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error) {
	rsp, err := c.ActionMoveMyNameActionMovePostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionMoveMyNameActionMovePostResponse(rsp)
}

func (c *ClientWithResponses) ActionMoveMyNameActionMovePostWithResponse(ctx context.Context, name string, body ActionMoveMyNameActionMovePostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionMoveMyNameActionMovePostResponse, error) {
	rsp, err := c.ActionMoveMyNameActionMovePost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionMoveMyNameActionMovePostResponse(rsp)
}

// ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse request with arbitrary body returning *ActionRecyclingMyNameActionRecyclingPostResponse
func (c *ClientWithResponses) ActionRecyclingMyNameActionRecyclingPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error) {
	rsp, err := c.ActionRecyclingMyNameActionRecyclingPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionRecyclingMyNameActionRecyclingPostResponse(rsp)
}

func (c *ClientWithResponses) ActionRecyclingMyNameActionRecyclingPostWithResponse(ctx context.Context, name string, body ActionRecyclingMyNameActionRecyclingPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionRecyclingMyNameActionRecyclingPostResponse, error) {
	rsp, err := c.ActionRecyclingMyNameActionRecyclingPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionRecyclingMyNameActionRecyclingPostResponse(rsp)
}

// ActionCompleteTaskMyNameActionTaskCompletePostWithResponse request returning *ActionCompleteTaskMyNameActionTaskCompletePostResponse
func (c *ClientWithResponses) ActionCompleteTaskMyNameActionTaskCompletePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionCompleteTaskMyNameActionTaskCompletePostResponse, error) {
	rsp, err := c.ActionCompleteTaskMyNameActionTaskCompletePost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionCompleteTaskMyNameActionTaskCompletePostResponse(rsp)
}

// ActionTaskExchangeMyNameActionTaskExchangePostWithResponse request returning *ActionTaskExchangeMyNameActionTaskExchangePostResponse
func (c *ClientWithResponses) ActionTaskExchangeMyNameActionTaskExchangePostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionTaskExchangeMyNameActionTaskExchangePostResponse, error) {
	rsp, err := c.ActionTaskExchangeMyNameActionTaskExchangePost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionTaskExchangeMyNameActionTaskExchangePostResponse(rsp)
}

// ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse request returning *ActionAcceptNewTaskMyNameActionTaskNewPostResponse
func (c *ClientWithResponses) ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ActionAcceptNewTaskMyNameActionTaskNewPostResponse, error) {
	rsp, err := c.ActionAcceptNewTaskMyNameActionTaskNewPost(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionAcceptNewTaskMyNameActionTaskNewPostResponse(rsp)
}

// ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse request with arbitrary body returning *ActionUnequipItemMyNameActionUnequipPostResponse
func (c *ClientWithResponses) ActionUnequipItemMyNameActionUnequipPostWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error) {
	rsp, err := c.ActionUnequipItemMyNameActionUnequipPostWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionUnequipItemMyNameActionUnequipPostResponse(rsp)
}

func (c *ClientWithResponses) ActionUnequipItemMyNameActionUnequipPostWithResponse(ctx context.Context, name string, body ActionUnequipItemMyNameActionUnequipPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ActionUnequipItemMyNameActionUnequipPostResponse, error) {
	rsp, err := c.ActionUnequipItemMyNameActionUnequipPost(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActionUnequipItemMyNameActionUnequipPostResponse(rsp)
}

// GetAllResourcesResourcesGetWithResponse request returning *GetAllResourcesResourcesGetResponse
func (c *ClientWithResponses) GetAllResourcesResourcesGetWithResponse(ctx context.Context, params *GetAllResourcesResourcesGetParams, reqEditors ...RequestEditorFn) (*GetAllResourcesResourcesGetResponse, error) {
	rsp, err := c.GetAllResourcesResourcesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllResourcesResourcesGetResponse(rsp)
}

// GetResourceResourcesCodeGetWithResponse request returning *GetResourceResourcesCodeGetResponse
func (c *ClientWithResponses) GetResourceResourcesCodeGetWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetResourceResourcesCodeGetResponse, error) {
	rsp, err := c.GetResourceResourcesCodeGet(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceResourcesCodeGetResponse(rsp)
}

// GenerateTokenTokenPostWithResponse request returning *GenerateTokenTokenPostResponse
func (c *ClientWithResponses) GenerateTokenTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GenerateTokenTokenPostResponse, error) {
	rsp, err := c.GenerateTokenTokenPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateTokenTokenPostResponse(rsp)
}

// ParseGetStatusGetResponse parses an HTTP response from a GetStatusGetWithResponse call
func ParseGetStatusGetResponse(rsp *http.Response) (*GetStatusGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAccountAccountsCreatePostResponse parses an HTTP response from a CreateAccountAccountsCreatePostWithResponse call
func ParseCreateAccountAccountsCreatePostResponse(rsp *http.Response) (*CreateAccountAccountsCreatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountAccountsCreatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllCharactersCharactersGetResponse parses an HTTP response from a GetAllCharactersCharactersGetWithResponse call
func ParseGetAllCharactersCharactersGetResponse(rsp *http.Response) (*GetAllCharactersCharactersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCharactersCharactersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageCharacterSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCharacterCharactersCreatePostResponse parses an HTTP response from a CreateCharacterCharactersCreatePostWithResponse call
func ParseCreateCharacterCharactersCreatePostResponse(rsp *http.Response) (*CreateCharacterCharactersCreatePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCharacterCharactersCreatePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCharacterCharactersNameGetResponse parses an HTTP response from a GetCharacterCharactersNameGetWithResponse call
func ParseGetCharacterCharactersNameGetResponse(rsp *http.Response) (*GetCharacterCharactersNameGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharacterCharactersNameGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllEventsEventsGetResponse parses an HTTP response from a GetAllEventsEventsGetWithResponse call
func ParseGetAllEventsEventsGetResponse(rsp *http.Response) (*GetAllEventsEventsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllEventsEventsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageActiveEventSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllGeItemsGeGetResponse parses an HTTP response from a GetAllGeItemsGeGetWithResponse call
func ParseGetAllGeItemsGeGetResponse(rsp *http.Response) (*GetAllGeItemsGeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllGeItemsGeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageGEItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGeItemGeCodeGetResponse parses an HTTP response from a GetGeItemGeCodeGetWithResponse call
func ParseGetGeItemGeCodeGetResponse(rsp *http.Response) (*GetGeItemGeCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGeItemGeCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GEItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllItemsItemsGetResponse parses an HTTP response from a GetAllItemsItemsGetWithResponse call
func ParseGetAllItemsItemsGetResponse(rsp *http.Response) (*GetAllItemsItemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllItemsItemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetItemItemsCodeGetResponse parses an HTTP response from a GetItemItemsCodeGetWithResponse call
func ParseGetItemItemsCodeGetResponse(rsp *http.Response) (*GetItemItemsCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemItemsCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllMapsMapsGetResponse parses an HTTP response from a GetAllMapsMapsGetWithResponse call
func ParseGetAllMapsMapsGetResponse(rsp *http.Response) (*GetAllMapsMapsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMapsMapsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageMapSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMapMapsXYGetResponse parses an HTTP response from a GetMapMapsXYGetWithResponse call
func ParseGetMapMapsXYGetResponse(rsp *http.Response) (*GetMapMapsXYGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMapMapsXYGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MapResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllMonstersMonstersGetResponse parses an HTTP response from a GetAllMonstersMonstersGetWithResponse call
func ParseGetAllMonstersMonstersGetResponse(rsp *http.Response) (*GetAllMonstersMonstersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMonstersMonstersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageMonsterSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMonsterMonstersCodeGetResponse parses an HTTP response from a GetMonsterMonstersCodeGetWithResponse call
func ParseGetMonsterMonstersCodeGetResponse(rsp *http.Response) (*GetMonsterMonstersCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonsterMonstersCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonsterResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBankGoldsMyBankGoldGetResponse parses an HTTP response from a GetBankGoldsMyBankGoldGetWithResponse call
func ParseGetBankGoldsMyBankGoldGetResponse(rsp *http.Response) (*GetBankGoldsMyBankGoldGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBankGoldsMyBankGoldGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoldBankResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBankItemsMyBankItemsGetResponse parses an HTTP response from a GetBankItemsMyBankItemsGetWithResponse call
func ParseGetBankItemsMyBankItemsGetResponse(rsp *http.Response) (*GetBankItemsMyBankItemsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBankItemsMyBankItemsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageSimpleItemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangePasswordMyChangePasswordPostResponse parses an HTTP response from a ChangePasswordMyChangePasswordPostWithResponse call
func ParseChangePasswordMyChangePasswordPostResponse(rsp *http.Response) (*ChangePasswordMyChangePasswordPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangePasswordMyChangePasswordPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyCharactersMyCharactersGetResponse parses an HTTP response from a GetMyCharactersMyCharactersGetWithResponse call
func ParseGetMyCharactersMyCharactersGetResponse(rsp *http.Response) (*GetMyCharactersMyCharactersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyCharactersMyCharactersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyCharactersListSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllCharactersLogsMyLogsGetResponse parses an HTTP response from a GetAllCharactersLogsMyLogsGetWithResponse call
func ParseGetAllCharactersLogsMyLogsGetResponse(rsp *http.Response) (*GetAllCharactersLogsMyLogsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCharactersLogsMyLogsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageLogSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionDepositBankMyNameActionBankDepositPostResponse parses an HTTP response from a ActionDepositBankMyNameActionBankDepositPostWithResponse call
func ParseActionDepositBankMyNameActionBankDepositPostResponse(rsp *http.Response) (*ActionDepositBankMyNameActionBankDepositPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionDepositBankMyNameActionBankDepositPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionItemBankResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse parses an HTTP response from a ActionDepositBankGoldMyNameActionBankDepositGoldPostWithResponse call
func ParseActionDepositBankGoldMyNameActionBankDepositGoldPostResponse(rsp *http.Response) (*ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoldResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse parses an HTTP response from a ActionWithdrawBankMyNameActionBankWithdrawPostWithResponse call
func ParseActionWithdrawBankMyNameActionBankWithdrawPostResponse(rsp *http.Response) (*ActionWithdrawBankMyNameActionBankWithdrawPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionWithdrawBankMyNameActionBankWithdrawPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionItemBankResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse parses an HTTP response from a ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostWithResponse call
func ParseActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse(rsp *http.Response) (*ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GoldResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionCraftingMyNameActionCraftingPostResponse parses an HTTP response from a ActionCraftingMyNameActionCraftingPostWithResponse call
func ParseActionCraftingMyNameActionCraftingPostResponse(rsp *http.Response) (*ActionCraftingMyNameActionCraftingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionCraftingMyNameActionCraftingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SkillResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionDeleteItemMyNameActionDeletePostResponse parses an HTTP response from a ActionDeleteItemMyNameActionDeletePostWithResponse call
func ParseActionDeleteItemMyNameActionDeletePostResponse(rsp *http.Response) (*ActionDeleteItemMyNameActionDeletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionDeleteItemMyNameActionDeletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteItemResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionEquipItemMyNameActionEquipPostResponse parses an HTTP response from a ActionEquipItemMyNameActionEquipPostWithResponse call
func ParseActionEquipItemMyNameActionEquipPostResponse(rsp *http.Response) (*ActionEquipItemMyNameActionEquipPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionEquipItemMyNameActionEquipPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EquipmentResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionFightMyNameActionFightPostResponse parses an HTTP response from a ActionFightMyNameActionFightPostWithResponse call
func ParseActionFightMyNameActionFightPostResponse(rsp *http.Response) (*ActionFightMyNameActionFightPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionFightMyNameActionFightPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterFightResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionGatheringMyNameActionGatheringPostResponse parses an HTTP response from a ActionGatheringMyNameActionGatheringPostWithResponse call
func ParseActionGatheringMyNameActionGatheringPostResponse(rsp *http.Response) (*ActionGatheringMyNameActionGatheringPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionGatheringMyNameActionGatheringPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SkillResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionGeBuyItemMyNameActionGeBuyPostResponse parses an HTTP response from a ActionGeBuyItemMyNameActionGeBuyPostWithResponse call
func ParseActionGeBuyItemMyNameActionGeBuyPostResponse(rsp *http.Response) (*ActionGeBuyItemMyNameActionGeBuyPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionGeBuyItemMyNameActionGeBuyPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GETransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionGeSellItemMyNameActionGeSellPostResponse parses an HTTP response from a ActionGeSellItemMyNameActionGeSellPostWithResponse call
func ParseActionGeSellItemMyNameActionGeSellPostResponse(rsp *http.Response) (*ActionGeSellItemMyNameActionGeSellPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionGeSellItemMyNameActionGeSellPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GETransactionResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionMoveMyNameActionMovePostResponse parses an HTTP response from a ActionMoveMyNameActionMovePostWithResponse call
func ParseActionMoveMyNameActionMovePostResponse(rsp *http.Response) (*ActionMoveMyNameActionMovePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionMoveMyNameActionMovePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CharacterMovementResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionRecyclingMyNameActionRecyclingPostResponse parses an HTTP response from a ActionRecyclingMyNameActionRecyclingPostWithResponse call
func ParseActionRecyclingMyNameActionRecyclingPostResponse(rsp *http.Response) (*ActionRecyclingMyNameActionRecyclingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionRecyclingMyNameActionRecyclingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecyclingResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionCompleteTaskMyNameActionTaskCompletePostResponse parses an HTTP response from a ActionCompleteTaskMyNameActionTaskCompletePostWithResponse call
func ParseActionCompleteTaskMyNameActionTaskCompletePostResponse(rsp *http.Response) (*ActionCompleteTaskMyNameActionTaskCompletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionCompleteTaskMyNameActionTaskCompletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskRewardResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionTaskExchangeMyNameActionTaskExchangePostResponse parses an HTTP response from a ActionTaskExchangeMyNameActionTaskExchangePostWithResponse call
func ParseActionTaskExchangeMyNameActionTaskExchangePostResponse(rsp *http.Response) (*ActionTaskExchangeMyNameActionTaskExchangePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionTaskExchangeMyNameActionTaskExchangePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskRewardResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionAcceptNewTaskMyNameActionTaskNewPostResponse parses an HTTP response from a ActionAcceptNewTaskMyNameActionTaskNewPostWithResponse call
func ParseActionAcceptNewTaskMyNameActionTaskNewPostResponse(rsp *http.Response) (*ActionAcceptNewTaskMyNameActionTaskNewPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionAcceptNewTaskMyNameActionTaskNewPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActionUnequipItemMyNameActionUnequipPostResponse parses an HTTP response from a ActionUnequipItemMyNameActionUnequipPostWithResponse call
func ParseActionUnequipItemMyNameActionUnequipPostResponse(rsp *http.Response) (*ActionUnequipItemMyNameActionUnequipPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActionUnequipItemMyNameActionUnequipPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EquipmentResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllResourcesResourcesGetResponse parses an HTTP response from a GetAllResourcesResourcesGetWithResponse call
func ParseGetAllResourcesResourcesGetResponse(rsp *http.Response) (*GetAllResourcesResourcesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllResourcesResourcesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataPageResourceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetResourceResourcesCodeGetResponse parses an HTTP response from a GetResourceResourcesCodeGetWithResponse call
func ParseGetResourceResourcesCodeGetResponse(rsp *http.Response) (*GetResourceResourcesCodeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceResourcesCodeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGenerateTokenTokenPostResponse parses an HTTP response from a GenerateTokenTokenPostWithResponse call
func ParseGenerateTokenTokenPostResponse(rsp *http.Response) (*GenerateTokenTokenPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateTokenTokenPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
